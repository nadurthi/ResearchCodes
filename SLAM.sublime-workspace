{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"map",
				"mapptr"
			],
			[
				"data",
				"datamanipulators\tmodule"
			],
			[
				"sim",
				"simname"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pyslam/scripts/kittiLocalize.cpp",
			"settings":
			{
				"buffer_size": 6571,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"paste",
					null,
					"AgAAANgFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADiBQAAAAAAAAYAAABzZXRnSGs",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgFAAAAAAAA3gUAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"paste",
					null,
					"AgAAAPQFAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD+BQAAAAAAAAYAAABzZXRnSGs",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQFAAAAAAAA+gUAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAcCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgoKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtfY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrX2NvcnIpOwoKICAgICAgICBweTo6Y2xhc3NfPE1hcExvY2FsaXplcj4obSwgIk1hcExvY2FsaXplciIpCiAgICAgICAgLmRlZihweTo6aW5pdDxzdGQ6OnN0cmluZyBvcHRzdHI+KCkpCiAgICAgICAgLmRlZigic2V0T3B0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OnNldE9wdGlvbnMpCiAgICAgICAgLmRlZigicmVzZXRIIiwgJk1hcExvY2FsaXplcjo6cmVzZXRIKQogICAgICAgIC5kZWYoImFkZE1lYXMiLCAmTWFwTG9jYWxpemVyOjphZGRNZWFzKQogICAgICAgIC5kZWYoImFkZE1hcCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcCkKICAgICAgICAuZGVmKCJhZGRNYXAyRCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcDJEKQogICAgICAgIC5kZWYoInNldGdIayIsICZNYXBMb2NhbGl6ZXI6OnNldGdIaykKICAgICAgICAuZGVmKCJzZXRMb29rVXBEaXN0IiwgJk1hcExvY2FsaXplcjo6c2V0TG9va1VwRGlzdCkKICAgICAgICAuZGVmKCJzZXRSZWdpc3RlcmVkU2VxSCIsICZNYXBMb2NhbGl6ZXI6OnNldFJlZ2lzdGVyZWRTZXFIKQogICAgICAgIC5kZWYoInNldFJlbFN0YXRlcyIsICZNYXBMb2NhbGl6ZXI6OnNldFJlbFN0YXRlcykKICAgICAgICAuZGVmKCJzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6c2V0U2VxX2dIaykKCiAgICAgICAgLmRlZigiZ2V0bWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1lYXNfZWlnZW4pCiAgICAgICAgLmRlZigiTWFwUGNsbGltaXRzIiwgJk1hcExvY2FsaXplcjo6TWFwUGNsbGltaXRzKQogICAgICAgIC5kZWYoImdldGR0IiwgJk1hcExvY2FsaXplcjo6Z2V0ZHQpCiAgICAgICAgLmRlZigiZ2V0bWFwbG9jYWxfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBsb2NhbF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXBfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0bWFwMkRfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXAyRF9laWdlbikKICAgICAgICAuZGVmKCJnZXR2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0dmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRwb3NpdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpnZXRwb3NpdGlvbnMpCiAgICAgICAgLmRlZigiZ2V0YW5ndWxhcnZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXRhbmd1bGFydmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRMaWtlbGlob29kcyIsICZNYXBMb2NhbGl6ZXI6OmdldExpa2VsaWhvb2RzKQogICAgICAgIC5kZWYoImdldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldHNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRzZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldGFsaWduU2VxTWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldGFsaWduU2VxTWVhc19laWdlbikKCiAgICAgICAgLmRlZigiQk1hdGNoc2VxIiwgJk1hcExvY2FsaXplcjo6Qk1hdGNoc2VxKQogICAgICAgIC5kZWYoImdpY3BfY29ycmVjdGlvbiIsICZNYXBMb2NhbGl6ZXI6OmdpY3BfY29ycmVjdGlvbik7CgoKI2lmZGVmIFZFUlNJT05fSU5GTwogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9IE1BQ1JPX1NUUklOR0lGWShWRVJTSU9OX0lORk8pOwojZWxzZQogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9ICJkZXYiOwojZW5kaWYKfQoAAAAAAAAAAFsKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABbCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtfY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrX2NvcnIpOwoKICAgICAgICBweTo6Y2xhc3NfPE1hcExvY2FsaXplcj4obSwgIk1hcExvY2FsaXplciIpCiAgICAgICAgLmRlZihweTo6aW5pdDxzdGQ6OnN0cmluZyBvcHRzdHI+KCkpCiAgICAgICAgLmRlZigic2V0T3B0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OnNldE9wdGlvbnMpCiAgICAgICAgLmRlZigicmVzZXRIIiwgJk1hcExvY2FsaXplcjo6cmVzZXRIKQogICAgICAgIC5kZWYoImFkZE1lYXMiLCAmTWFwTG9jYWxpemVyOjphZGRNZWFzKQogICAgICAgIC5kZWYoImFkZE1hcCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcCkKICAgICAgICAuZGVmKCJhZGRNYXAyRCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcDJEKQogICAgICAgIC5kZWYoInNldGdIayIsICZNYXBMb2NhbGl6ZXI6OnNldGdIaykKICAgICAgICAuZGVmKCJzZXRMb29rVXBEaXN0IiwgJk1hcExvY2FsaXplcjo6c2V0TG9va1VwRGlzdCkKICAgICAgICAuZGVmKCJzZXRSZWdpc3RlcmVkU2VxSCIsICZNYXBMb2NhbGl6ZXI6OnNldFJlZ2lzdGVyZWRTZXFIKQogICAgICAgIC5kZWYoInNldFJlbFN0YXRlcyIsICZNYXBMb2NhbGl6ZXI6OnNldFJlbFN0YXRlcykKICAgICAgICAuZGVmKCJzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6c2V0U2VxX2dIaykKCiAgICAgICAgLmRlZigiZ2V0bWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1lYXNfZWlnZW4pCiAgICAgICAgLmRlZigiTWFwUGNsbGltaXRzIiwgJk1hcExvY2FsaXplcjo6TWFwUGNsbGltaXRzKQogICAgICAgIC5kZWYoImdldGR0IiwgJk1hcExvY2FsaXplcjo6Z2V0ZHQpCiAgICAgICAgLmRlZigiZ2V0bWFwbG9jYWxfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBsb2NhbF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXBfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0bWFwMkRfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXAyRF9laWdlbikKICAgICAgICAuZGVmKCJnZXR2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0dmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRwb3NpdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpnZXRwb3NpdGlvbnMpCiAgICAgICAgLmRlZigiZ2V0YW5ndWxhcnZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXRhbmd1bGFydmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRMaWtlbGlob29kcyIsICZNYXBMb2NhbGl6ZXI6OmdldExpa2VsaWhvb2RzKQogICAgICAgIC5kZWYoImdldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldHNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRzZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldGFsaWduU2VxTWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldGFsaWduU2VxTWVhc19laWdlbikKCiAgICAgICAgLmRlZigiQk1hdGNoc2VxIiwgJk1hcExvY2FsaXplcjo6Qk1hdGNoc2VxKQogICAgICAgIC5kZWYoImdpY3BfY29ycmVjdGlvbiIsICZNYXBMb2NhbGl6ZXI6OmdpY3BfY29ycmVjdGlvbik7CgoKI2lmZGVmIFZFUlNJT05fSU5GTwogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9IE1BQ1JPX1NUUklOR0lGWShWRVJTSU9OX0lORk8pOwojZWxzZQogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9ICJkZXYiOwojZW5kaWYKfQoAAAAAAAAAAFoKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtfY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrY29ycik7CgogICAgICAgIHB5OjpjbGFzc188TWFwTG9jYWxpemVyPihtLCAiTWFwTG9jYWxpemVyIikKICAgICAgICAuZGVmKHB5Ojppbml0PHN0ZDo6c3RyaW5nIG9wdHN0cj4oKSkKICAgICAgICAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQoKICAgICAgICAuZGVmKCJnZXRtZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWVhc19laWdlbikKICAgICAgICAuZGVmKCJNYXBQY2xsaW1pdHMiLCAmTWFwTG9jYWxpemVyOjpNYXBQY2xsaW1pdHMpCiAgICAgICAgLmRlZigiZ2V0ZHQiLCAmTWFwTG9jYWxpemVyOjpnZXRkdCkKICAgICAgICAuZGVmKCJnZXRtYXBsb2NhbF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcGxvY2FsX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXAyRF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcDJEX2VpZ2VuKQogICAgICAgIC5kZWYoImdldHZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXR2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldHBvc2l0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OmdldHBvc2l0aW9ucykKICAgICAgICAuZGVmKCJnZXRhbmd1bGFydmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldGFuZ3VsYXJ2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldExpa2VsaWhvb2RzIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHMpCiAgICAgICAgLmRlZigiZ2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0c2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldHNldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX2VpZ2VuKQoKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpCiAgICAgICAgLmRlZigiZ2ljcF9jb3JyZWN0aW9uIiwgJk1hcExvY2FsaXplcjo6Z2ljcF9jb3JyZWN0aW9uKTsKCgojaWZkZWYgVkVSU0lPTl9JTkZPCiAgICAgICAgbS5hdHRyKCJfX3ZlcnNpb25fXyIpID0gTUFDUk9fU1RSSU5HSUZZKFZFUlNJT05fSU5GTyk7CiNlbHNlCiAgICAgICAgbS5hdHRyKCJfX3ZlcnNpb25fXyIpID0gImRldiI7CiNlbmRpZgp9CgAAAAAAAAAAWQoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABZCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC5kZWYocHk6OmluaXQ8c3RkOjpzdHJpbmcgb3B0c3RyPigpKQogICAgICAgIC5kZWYoInNldE9wdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpzZXRPcHRpb25zKQogICAgICAgIC5kZWYoInJlc2V0SCIsICZNYXBMb2NhbGl6ZXI6OnJlc2V0SCkKICAgICAgICAuZGVmKCJhZGRNZWFzIiwgJk1hcExvY2FsaXplcjo6YWRkTWVhcykKICAgICAgICAuZGVmKCJhZGRNYXAiLCAmTWFwTG9jYWxpemVyOjphZGRNYXApCiAgICAgICAgLmRlZigiYWRkTWFwMkQiLCAmTWFwTG9jYWxpemVyOjphZGRNYXAyRCkKICAgICAgICAuZGVmKCJzZXRnSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRnSGspCiAgICAgICAgLmRlZigic2V0TG9va1VwRGlzdCIsICZNYXBMb2NhbGl6ZXI6OnNldExvb2tVcERpc3QpCiAgICAgICAgLmRlZigic2V0UmVnaXN0ZXJlZFNlcUgiLCAmTWFwTG9jYWxpemVyOjpzZXRSZWdpc3RlcmVkU2VxSCkKICAgICAgICAuZGVmKCJzZXRSZWxTdGF0ZXMiLCAmTWFwTG9jYWxpemVyOjpzZXRSZWxTdGF0ZXMpCiAgICAgICAgLmRlZigic2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OnNldFNlcV9nSGspCgogICAgICAgIC5kZWYoImdldG1lYXNfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtZWFzX2VpZ2VuKQogICAgICAgIC5kZWYoIk1hcFBjbGxpbWl0cyIsICZNYXBMb2NhbGl6ZXI6Ok1hcFBjbGxpbWl0cykKICAgICAgICAuZGVmKCJnZXRkdCIsICZNYXBMb2NhbGl6ZXI6OmdldGR0KQogICAgICAgIC5kZWYoImdldG1hcGxvY2FsX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwbG9jYWxfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0bWFwX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcDJEX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwMkRfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0dmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldHZlbG9jaXRpZXMpCiAgICAgICAgLmRlZigiZ2V0cG9zaXRpb25zIiwgJk1hcExvY2FsaXplcjo6Z2V0cG9zaXRpb25zKQogICAgICAgIC5kZWYoImdldGFuZ3VsYXJ2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0YW5ndWxhcnZlbG9jaXRpZXMpCiAgICAgICAgLmRlZigiZ2V0TGlrZWxpaG9vZHMiLCAmTWFwTG9jYWxpemVyOjpnZXRMaWtlbGlob29kcykKICAgICAgICAuZGVmKCJnZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6Z2V0U2VxX2dIaykKICAgICAgICAuZGVmKCJnZXRzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6Z2V0c2V0U2VxX2dIaykKICAgICAgICAuZGVmKCJnZXRhbGlnblNlcU1lYXNfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRhbGlnblNlcU1lYXNfZWlnZW4pCgogICAgICAgIC5kZWYoIkJNYXRjaHNlcSIsICZNYXBMb2NhbGl6ZXI6OkJNYXRjaHNlcSkKICAgICAgICAuZGVmKCJnaWNwX2NvcnJlY3Rpb24iLCAmTWFwTG9jYWxpemVyOjpnaWNwX2NvcnJlY3Rpb24pOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAABaCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC5kZWYocHk6OmluaXQ8Y29uc3Qgc3RkOjpzdHJpbmcgJj4oKSkKICAgICAgICAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQoKICAgICAgICAuZGVmKCJnZXRtZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWVhc19laWdlbikKICAgICAgICAuZGVmKCJNYXBQY2xsaW1pdHMiLCAmTWFwTG9jYWxpemVyOjpNYXBQY2xsaW1pdHMpCiAgICAgICAgLmRlZigiZ2V0ZHQiLCAmTWFwTG9jYWxpemVyOjpnZXRkdCkKICAgICAgICAuZGVmKCJnZXRtYXBsb2NhbF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcGxvY2FsX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXAyRF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcDJEX2VpZ2VuKQogICAgICAgIC5kZWYoImdldHZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXR2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldHBvc2l0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OmdldHBvc2l0aW9ucykKICAgICAgICAuZGVmKCJnZXRhbmd1bGFydmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldGFuZ3VsYXJ2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldExpa2VsaWhvb2RzIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHMpCiAgICAgICAgLmRlZigiZ2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0c2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldHNldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX2VpZ2VuKQoKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpCiAgICAgICAgLmRlZigiZ2ljcF9jb3JyZWN0aW9uIiwgJk1hcExvY2FsaXplcjo6Z2ljcF9jb3JyZWN0aW9uKTsKCgojaWZkZWYgVkVSU0lPTl9JTkZPCiAgICAgICAgbS5hdHRyKCJfX3ZlcnNpb25fXyIpID0gTUFDUk9fU1RSSU5HSUZZKFZFUlNJT05fSU5GTyk7CiNlbHNlCiAgICAgICAgbS5hdHRyKCJfX3ZlcnNpb25fXyIpID0gImRldiI7CiNlbmRpZgp9CgAAAAAAAAAAGgoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC5kZWYocHk6OmluaXQ8Y29uc3Qgc3RkOjpzdHJpbmcgJj4oKSkKICAgICAgICAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQoKICAgICAgICAuZGVmKCJnZXRtZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWVhc19laWdlbikKICAgICAgICAuZGVmKCJNYXBQY2xsaW1pdHMiLCAmTWFwTG9jYWxpemVyOjpNYXBQY2xsaW1pdHMpCiAgICAgICAgLmRlZigiZ2V0ZHQiLCAmTWFwTG9jYWxpemVyOjpnZXRkdCkKICAgICAgICAuZGVmKCJnZXRtYXBsb2NhbF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcGxvY2FsX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXAyRF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcDJEX2VpZ2VuKQogICAgICAgIC5kZWYoImdldHZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXR2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldHBvc2l0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OmdldHBvc2l0aW9ucykKICAgICAgICAuZGVmKCJnZXRhbmd1bGFydmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldGFuZ3VsYXJ2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldExpa2VsaWhvb2RzIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHMpCiAgICAgICAgLmRlZigiZ2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0c2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldHNldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX2VpZ2VuKQoKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAAB8CgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB8CgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgLy8gcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC8vIC5kZWYocHk6OmluaXQ8Y29uc3Qgc3RkOjpzdHJpbmcgJj4oKSkKICAgICAgICAvLyAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAvLyAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLy8gLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLy8gLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC8vIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLy8gLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC8vIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC8vIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLy8gLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC8vIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQogICAgICAgIC8vCiAgICAgICAgLy8gLmRlZigiZ2V0bWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1lYXNfZWlnZW4pCiAgICAgICAgLy8gLmRlZigiTWFwUGNsbGltaXRzIiwgJk1hcExvY2FsaXplcjo6TWFwUGNsbGltaXRzKQogICAgICAgIC8vIC5kZWYoImdldGR0IiwgJk1hcExvY2FsaXplcjo6Z2V0ZHQpCiAgICAgICAgLy8gLmRlZigiZ2V0bWFwbG9jYWxfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBsb2NhbF9laWdlbikKICAgICAgICAvLyAuZGVmKCJnZXRtYXBfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBfZWlnZW4pCiAgICAgICAgLy8gLmRlZigiZ2V0bWFwMkRfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXAyRF9laWdlbikKICAgICAgICAvLyAuZGVmKCJnZXR2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0dmVsb2NpdGllcykKICAgICAgICAvLyAuZGVmKCJnZXRwb3NpdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpnZXRwb3NpdGlvbnMpCiAgICAgICAgLy8gLmRlZigiZ2V0YW5ndWxhcnZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXRhbmd1bGFydmVsb2NpdGllcykKICAgICAgICAvLyAuZGVmKCJnZXRMaWtlbGlob29kcyIsICZNYXBMb2NhbGl6ZXI6OmdldExpa2VsaWhvb2RzKQogICAgICAgIC8vIC5kZWYoImdldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRTZXFfZ0hrKQogICAgICAgIC8vIC5kZWYoImdldHNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRzZXRTZXFfZ0hrKQogICAgICAgIC8vIC5kZWYoImdldGFsaWduU2VxTWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldGFsaWduU2VxTWVhc19laWdlbikKICAgICAgICAvLwogICAgICAgIC8vIC5kZWYoIkJNYXRjaHNlcSIsICZNYXBMb2NhbGl6ZXI6OkJNYXRjaHNlcSk7CgoKI2lmZGVmIFZFUlNJT05fSU5GTwogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9IE1BQ1JPX1NUUklOR0lGWShWRVJTSU9OX0lORk8pOwojZWxzZQogICAgICAgIG0uYXR0cigiX192ZXJzaW9uX18iKSA9ICJkZXYiOwojZW5kaWYKfQoAAAAAAAAAAKEKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAChCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICAvLyBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC8vIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC8vIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLy8gLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC8vIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLy8gLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwogICAgICAgIC8vCiAgICAgICAgLy8gcHk6OmNsYXNzXzxCTWF0Y2hBbmRDb3JySD4obSwgIkJNYXRjaEFuZENvcnJIIikKICAgICAgICAvLyAuZGVmX3JlYWR3cml0ZSgic29scyIsICZCTWF0Y2hBbmRDb3JySDo6c29scykKICAgICAgICAvLyAuZGVmX3JlYWR3cml0ZSgiZ0hrY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrY29ycik7CgogICAgICAgIC8vIHB5OjpjbGFzc188TWFwTG9jYWxpemVyPihtLCAiTWFwTG9jYWxpemVyIikKICAgICAgICAvLyAuZGVmKHB5Ojppbml0PGNvbnN0IHN0ZDo6c3RyaW5nICY+KCkpCiAgICAgICAgLy8gLmRlZigic2V0T3B0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OnNldE9wdGlvbnMpCiAgICAgICAgLy8gLmRlZigicmVzZXRIIiwgJk1hcExvY2FsaXplcjo6cmVzZXRIKQogICAgICAgIC8vIC5kZWYoImFkZE1lYXMiLCAmTWFwTG9jYWxpemVyOjphZGRNZWFzKQogICAgICAgIC8vIC5kZWYoImFkZE1hcCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcCkKICAgICAgICAvLyAuZGVmKCJhZGRNYXAyRCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcDJEKQogICAgICAgIC8vIC5kZWYoInNldGdIayIsICZNYXBMb2NhbGl6ZXI6OnNldGdIaykKICAgICAgICAvLyAuZGVmKCJzZXRMb29rVXBEaXN0IiwgJk1hcExvY2FsaXplcjo6c2V0TG9va1VwRGlzdCkKICAgICAgICAvLyAuZGVmKCJzZXRSZWdpc3RlcmVkU2VxSCIsICZNYXBMb2NhbGl6ZXI6OnNldFJlZ2lzdGVyZWRTZXFIKQogICAgICAgIC8vIC5kZWYoInNldFJlbFN0YXRlcyIsICZNYXBMb2NhbGl6ZXI6OnNldFJlbFN0YXRlcykKICAgICAgICAvLyAuZGVmKCJzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6c2V0U2VxX2dIaykKICAgICAgICAvLwogICAgICAgIC8vIC5kZWYoImdldG1lYXNfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtZWFzX2VpZ2VuKQogICAgICAgIC8vIC5kZWYoIk1hcFBjbGxpbWl0cyIsICZNYXBMb2NhbGl6ZXI6Ok1hcFBjbGxpbWl0cykKICAgICAgICAvLyAuZGVmKCJnZXRkdCIsICZNYXBMb2NhbGl6ZXI6OmdldGR0KQogICAgICAgIC8vIC5kZWYoImdldG1hcGxvY2FsX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwbG9jYWxfZWlnZW4pCiAgICAgICAgLy8gLmRlZigiZ2V0bWFwX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwX2VpZ2VuKQogICAgICAgIC8vIC5kZWYoImdldG1hcDJEX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWFwMkRfZWlnZW4pCiAgICAgICAgLy8gLmRlZigiZ2V0dmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldHZlbG9jaXRpZXMpCiAgICAgICAgLy8gLmRlZigiZ2V0cG9zaXRpb25zIiwgJk1hcExvY2FsaXplcjo6Z2V0cG9zaXRpb25zKQogICAgICAgIC8vIC5kZWYoImdldGFuZ3VsYXJ2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0YW5ndWxhcnZlbG9jaXRpZXMpCiAgICAgICAgLy8gLmRlZigiZ2V0TGlrZWxpaG9vZHMiLCAmTWFwTG9jYWxpemVyOjpnZXRMaWtlbGlob29kcykKICAgICAgICAvLyAuZGVmKCJnZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6Z2V0U2VxX2dIaykKICAgICAgICAvLyAuZGVmKCJnZXRzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6Z2V0c2V0U2VxX2dIaykKICAgICAgICAvLyAuZGVmKCJnZXRhbGlnblNlcU1lYXNfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRhbGlnblNlcU1lYXNfZWlnZW4pCiAgICAgICAgLy8KICAgICAgICAvLyAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAAAaCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsaXplLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC5kZWYocHk6OmluaXQ8Y29uc3Qgc3RkOjpzdHJpbmcgJj4oKSkKICAgICAgICAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQoKICAgICAgICAuZGVmKCJnZXRtZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWVhc19laWdlbikKICAgICAgICAuZGVmKCJNYXBQY2xsaW1pdHMiLCAmTWFwTG9jYWxpemVyOjpNYXBQY2xsaW1pdHMpCiAgICAgICAgLmRlZigiZ2V0ZHQiLCAmTWFwTG9jYWxpemVyOjpnZXRkdCkKICAgICAgICAuZGVmKCJnZXRtYXBsb2NhbF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcGxvY2FsX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXAyRF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcDJEX2VpZ2VuKQogICAgICAgIC5kZWYoImdldHZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXR2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldHBvc2l0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OmdldHBvc2l0aW9ucykKICAgICAgICAuZGVmKCJnZXRhbmd1bGFydmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldGFuZ3VsYXJ2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldExpa2VsaWhvb2RzIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHMpCiAgICAgICAgLmRlZigiZ2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0c2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldHNldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX2VpZ2VuKQoKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAAAXCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAXCgAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKICAgICAgICBweTo6Y2xhc3NfPEJpbk1hdGNoU29sPihtLCAiQmluTWF0Y2hTb2wiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJIIiwgJkJpbk1hdGNoU29sOjpIKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0MCIsICZCaW5NYXRjaFNvbDo6Y29zdDApCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImx2bCIsICZCaW5NYXRjaFNvbDo6bHZsKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJteExWTCIsICZCaW5NYXRjaFNvbDo6bXhMVkwpCiAgICAgICAgLmRlZl9yZWFkd3JpdGUoImNvc3QiLCAmQmluTWF0Y2hTb2w6OmNvc3QpOwoKICAgICAgICBweTo6Y2xhc3NfPEJNYXRjaEFuZENvcnJIPihtLCAiQk1hdGNoQW5kQ29yckgiKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJzb2xzIiwgJkJNYXRjaEFuZENvcnJIOjpzb2xzKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJnSGtjb3JyIiwgJkJNYXRjaEFuZENvcnJIOjpnSGtjb3JyKTsKCiAgICAgICAgcHk6OmNsYXNzXzxNYXBMb2NhbGl6ZXI+KG0sICJNYXBMb2NhbGl6ZXIiKQogICAgICAgIC5kZWYocHk6OmluaXQ8Y29uc3Qgc3RkOjpzdHJpbmcgJj4oKSkKICAgICAgICAuZGVmKCJzZXRPcHRpb25zIiwgJk1hcExvY2FsaXplcjo6c2V0T3B0aW9ucykKICAgICAgICAuZGVmKCJyZXNldEgiLCAmTWFwTG9jYWxpemVyOjpyZXNldEgpCiAgICAgICAgLmRlZigiYWRkTWVhcyIsICZNYXBMb2NhbGl6ZXI6OmFkZE1lYXMpCiAgICAgICAgLmRlZigiYWRkTWFwIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwKQogICAgICAgIC5kZWYoImFkZE1hcDJEIiwgJk1hcExvY2FsaXplcjo6YWRkTWFwMkQpCiAgICAgICAgLmRlZigic2V0Z0hrIiwgJk1hcExvY2FsaXplcjo6c2V0Z0hrKQogICAgICAgIC5kZWYoInNldExvb2tVcERpc3QiLCAmTWFwTG9jYWxpemVyOjpzZXRMb29rVXBEaXN0KQogICAgICAgIC5kZWYoInNldFJlZ2lzdGVyZWRTZXFIIiwgJk1hcExvY2FsaXplcjo6c2V0UmVnaXN0ZXJlZFNlcUgpCiAgICAgICAgLmRlZigic2V0UmVsU3RhdGVzIiwgJk1hcExvY2FsaXplcjo6c2V0UmVsU3RhdGVzKQogICAgICAgIC5kZWYoInNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpzZXRTZXFfZ0hrKQoKICAgICAgICAuZGVmKCJnZXRtZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0bWVhc19laWdlbikKICAgICAgICAuZGVmKCJNYXBQY2xsaW1pdHMiLCAmTWFwTG9jYWxpemVyOjpNYXBQY2xsaW1pdHMpCiAgICAgICAgLmRlZigiZ2V0ZHQiLCAmTWFwTG9jYWxpemVyOjpnZXRkdCkKICAgICAgICAuZGVmKCJnZXRtYXBsb2NhbF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcGxvY2FsX2VpZ2VuKQogICAgICAgIC5kZWYoImdldG1hcF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXAyRF9laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1hcDJEX2VpZ2VuKQogICAgICAgIC5kZWYoImdldHZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXR2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldHBvc2l0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OmdldHBvc2l0aW9ucykKICAgICAgICAuZGVmKCJnZXRhbmd1bGFydmVsb2NpdGllcyIsICZNYXBMb2NhbGl6ZXI6OmdldGFuZ3VsYXJ2ZWxvY2l0aWVzKQogICAgICAgIC5kZWYoImdldExpa2VsaWhvb2RzIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHMpCiAgICAgICAgLmRlZigiZ2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0c2V0U2VxX2dIayIsICZNYXBMb2NhbGl6ZXI6OmdldHNldFNlcV9nSGspCiAgICAgICAgLmRlZigiZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX2VpZ2VuKQoKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAAAxCwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAxCwAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKCiAgICAgICAgbS5kZWYoInBvc2UySG1hdCIsICZwb3NlMkhtYXQsIFIicGJkb2MoCiAgICAgICAgICAgICAgSUNQIGluIFBDTAogICAgICAgICAgKXBiZG9jIik7CiAgICAgICAgbS5kZWYoIkhtYXQycG9zZSIsICZIbWF0MnBvc2UsIFIicGJkb2MoCiAgICAgICAgICAgICAgICBJQ1AgaW4gUENMCiAgICAgICAgICAgIClwYmRvYyIpOwoKCiAgICAgICAgcHk6OmNsYXNzXzxCaW5NYXRjaFNvbD4obSwgIkJpbk1hdGNoU29sIikKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiSCIsICZCaW5NYXRjaFNvbDo6SCkKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiY29zdDAiLCAmQmluTWF0Y2hTb2w6OmNvc3QwKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJsdmwiLCAmQmluTWF0Y2hTb2w6Omx2bCkKICAgICAgICAuZGVmX3JlYWR3cml0ZSgibXhMVkwiLCAmQmluTWF0Y2hTb2w6Om14TFZMKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0IiwgJkJpbk1hdGNoU29sOjpjb3N0KTsKCiAgICAgICAgcHk6OmNsYXNzXzxCTWF0Y2hBbmRDb3JySD4obSwgIkJNYXRjaEFuZENvcnJIIikKICAgICAgICAuZGVmX3JlYWR3cml0ZSgic29scyIsICZCTWF0Y2hBbmRDb3JySDo6c29scykKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiZ0hrY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrY29ycik7CgogICAgICAgIHB5OjpjbGFzc188TWFwTG9jYWxpemVyPihtLCAiTWFwTG9jYWxpemVyIikKICAgICAgICAuZGVmKHB5Ojppbml0PGNvbnN0IHN0ZDo6c3RyaW5nICY+KCkpCiAgICAgICAgLmRlZigic2V0T3B0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OnNldE9wdGlvbnMpCiAgICAgICAgLmRlZigicmVzZXRIIiwgJk1hcExvY2FsaXplcjo6cmVzZXRIKQogICAgICAgIC5kZWYoImFkZE1lYXMiLCAmTWFwTG9jYWxpemVyOjphZGRNZWFzKQogICAgICAgIC5kZWYoImFkZE1hcCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcCkKICAgICAgICAuZGVmKCJhZGRNYXAyRCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcDJEKQogICAgICAgIC5kZWYoInNldGdIayIsICZNYXBMb2NhbGl6ZXI6OnNldGdIaykKICAgICAgICAuZGVmKCJzZXRMb29rVXBEaXN0IiwgJk1hcExvY2FsaXplcjo6c2V0TG9va1VwRGlzdCkKICAgICAgICAuZGVmKCJzZXRSZWdpc3RlcmVkU2VxSCIsICZNYXBMb2NhbGl6ZXI6OnNldFJlZ2lzdGVyZWRTZXFIKQogICAgICAgIC5kZWYoInNldFJlbFN0YXRlcyIsICZNYXBMb2NhbGl6ZXI6OnNldFJlbFN0YXRlcykKICAgICAgICAuZGVmKCJzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6c2V0U2VxX2dIaykKCiAgICAgICAgLmRlZigiZ2V0bWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1lYXNfZWlnZW4pCiAgICAgICAgLmRlZigiTWFwUGNsbGltaXRzIiwgJk1hcExvY2FsaXplcjo6TWFwUGNsbGltaXRzKQogICAgICAgIC5kZWYoImdldGR0IiwgJk1hcExvY2FsaXplcjo6Z2V0ZHQpCiAgICAgICAgLmRlZigiZ2V0bWFwbG9jYWxfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBsb2NhbF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXBfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0bWFwMkRfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXAyRF9laWdlbikKICAgICAgICAuZGVmKCJnZXR2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0dmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRwb3NpdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpnZXRwb3NpdGlvbnMpCiAgICAgICAgLmRlZigiZ2V0YW5ndWxhcnZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXRhbmd1bGFydmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRMaWtlbGlob29kcyIsICZNYXBMb2NhbGl6ZXI6OmdldExpa2VsaWhvb2RzKQogICAgICAgIC5kZWYoImdldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldHNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRzZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldGFsaWduU2VxTWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldGFsaWduU2VxTWVhc19laWdlbikKICAgICAgICAuZGVmKCJnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbikKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAACLCwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACLCwAACiNpbmNsdWRlICJtZWFzbWFwbWFuYWdlcnMuaCIKI2luY2x1ZGUgPHB5YmluZDExL3B5YmluZDExLmg+CiNpbmNsdWRlICJweWJpbmQxMV9qc29uLmgiCgojZGVmaW5lIFNUUklOR0lGWSh4KSAjeAojZGVmaW5lIE1BQ1JPX1NUUklOR0lGWSh4KSBTVFJJTkdJRlkoeCkKCi8vdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKClBZQklORDExX01PRFVMRShraXR0aWxvY2FsLCBtKSB7CiAgICAgICAgbS5kb2MoKSA9IFIicGJkb2MoCiAgICAgICAgUHliaW5kMTEgZXhhbXBsZSBwbHVnaW4KICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAuLiBjdXJyZW50bW9kdWxlOjogY21ha2VfZXhhbXBsZQoKICAgICAgICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgICAgICAgOnRvY3RyZWU6IF9nZW5lcmF0ZQoKICAgICAgICAgICBhZGQKICAgICAgICAgICBzdWJ0cmFjdAogICAgKXBiZG9jIjsKCiAgICAgICAgbS5kZWYoInBvc2UySG1hdCIsICZwb3NlMkhtYXQsIFIicGJkb2MoCiAgICAgICAgICAgICAgSUNQIGluIFBDTAogICAgICAgICAgKXBiZG9jIik7CiAgICAgICAgbS5kZWYoIkhtYXQycG9zZSIsICZIbWF0MnBvc2UsIFIicGJkb2MoCiAgICAgICAgICAgICAgICBJQ1AgaW4gUENMCiAgICAgICAgICAgIClwYmRvYyIpOwoKCiAgICAgICAgcHk6OmNsYXNzXzxCaW5NYXRjaFNvbD4obSwgIkJpbk1hdGNoU29sIikKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiSCIsICZCaW5NYXRjaFNvbDo6SCkKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiY29zdDAiLCAmQmluTWF0Y2hTb2w6OmNvc3QwKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJsdmwiLCAmQmluTWF0Y2hTb2w6Omx2bCkKICAgICAgICAuZGVmX3JlYWR3cml0ZSgibXhMVkwiLCAmQmluTWF0Y2hTb2w6Om14TFZMKQogICAgICAgIC5kZWZfcmVhZHdyaXRlKCJjb3N0IiwgJkJpbk1hdGNoU29sOjpjb3N0KTsKCiAgICAgICAgcHk6OmNsYXNzXzxCTWF0Y2hBbmRDb3JySD4obSwgIkJNYXRjaEFuZENvcnJIIikKICAgICAgICAuZGVmX3JlYWR3cml0ZSgic29scyIsICZCTWF0Y2hBbmRDb3JySDo6c29scykKICAgICAgICAuZGVmX3JlYWR3cml0ZSgiZ0hrY29yciIsICZCTWF0Y2hBbmRDb3JySDo6Z0hrY29ycik7CgogICAgICAgIHB5OjpjbGFzc188TWFwTG9jYWxpemVyPihtLCAiTWFwTG9jYWxpemVyIikKICAgICAgICAuZGVmKHB5Ojppbml0PGNvbnN0IHN0ZDo6c3RyaW5nICY+KCkpCiAgICAgICAgLmRlZigic2V0T3B0aW9ucyIsICZNYXBMb2NhbGl6ZXI6OnNldE9wdGlvbnMpCiAgICAgICAgLmRlZigicmVzZXRIIiwgJk1hcExvY2FsaXplcjo6cmVzZXRIKQogICAgICAgIC5kZWYoImFkZE1lYXMiLCAmTWFwTG9jYWxpemVyOjphZGRNZWFzKQogICAgICAgIC5kZWYoImFkZE1hcCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcCkKICAgICAgICAuZGVmKCJhZGRNYXAyRCIsICZNYXBMb2NhbGl6ZXI6OmFkZE1hcDJEKQogICAgICAgIC5kZWYoInNldGdIayIsICZNYXBMb2NhbGl6ZXI6OnNldGdIaykKICAgICAgICAuZGVmKCJzZXRMb29rVXBEaXN0IiwgJk1hcExvY2FsaXplcjo6c2V0TG9va1VwRGlzdCkKICAgICAgICAuZGVmKCJzZXRSZWdpc3RlcmVkU2VxSCIsICZNYXBMb2NhbGl6ZXI6OnNldFJlZ2lzdGVyZWRTZXFIKQogICAgICAgIC5kZWYoInNldFJlbFN0YXRlcyIsICZNYXBMb2NhbGl6ZXI6OnNldFJlbFN0YXRlcykKICAgICAgICAuZGVmKCJzZXRTZXFfZ0hrIiwgJk1hcExvY2FsaXplcjo6c2V0U2VxX2dIaykKCiAgICAgICAgLmRlZigiZ2V0bWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldG1lYXNfZWlnZW4pCiAgICAgICAgLmRlZigiTWFwUGNsbGltaXRzIiwgJk1hcExvY2FsaXplcjo6TWFwUGNsbGltaXRzKQogICAgICAgIC5kZWYoImdldGR0IiwgJk1hcExvY2FsaXplcjo6Z2V0ZHQpCiAgICAgICAgLmRlZigiZ2V0bWFwbG9jYWxfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBsb2NhbF9laWdlbikKICAgICAgICAuZGVmKCJnZXRtYXBfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXBfZWlnZW4pCiAgICAgICAgLmRlZigiZ2V0bWFwMkRfZWlnZW4iLCAmTWFwTG9jYWxpemVyOjpnZXRtYXAyRF9laWdlbikKICAgICAgICAuZGVmKCJnZXR2ZWxvY2l0aWVzIiwgJk1hcExvY2FsaXplcjo6Z2V0dmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRwb3NpdGlvbnMiLCAmTWFwTG9jYWxpemVyOjpnZXRwb3NpdGlvbnMpCiAgICAgICAgLmRlZigiZ2V0YW5ndWxhcnZlbG9jaXRpZXMiLCAmTWFwTG9jYWxpemVyOjpnZXRhbmd1bGFydmVsb2NpdGllcykKICAgICAgICAuZGVmKCJnZXRMaWtlbGlob29kc19vY3RyZWUiLCAmTWFwTG9jYWxpemVyOjpnZXRMaWtlbGlob29kc19vY3RyZWUpCiAgICAgICAgLmRlZigiZ2V0TGlrZWxpaG9vZHNfbG9va3VwIiwgJk1hcExvY2FsaXplcjo6Z2V0TGlrZWxpaG9vZHNfbG9va3VwKQogICAgICAgIC5kZWYoImdldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldHNldFNlcV9nSGsiLCAmTWFwTG9jYWxpemVyOjpnZXRzZXRTZXFfZ0hrKQogICAgICAgIC5kZWYoImdldGFsaWduU2VxTWVhc19laWdlbiIsICZNYXBMb2NhbGl6ZXI6OmdldGFsaWduU2VxTWVhc19laWdlbikKICAgICAgICAuZGVmKCJnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuIiwgJk1hcExvY2FsaXplcjo6Z2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbikKICAgICAgICAuZGVmKCJCTWF0Y2hzZXEiLCAmTWFwTG9jYWxpemVyOjpCTWF0Y2hzZXEpOwoKCiNpZmRlZiBWRVJTSU9OX0lORk8KICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSBNQUNST19TVFJJTkdJRlkoVkVSU0lPTl9JTkZPKTsKI2Vsc2UKICAgICAgICBtLmF0dHIoIl9fdmVyc2lvbl9fIikgPSAiZGV2IjsKI2VuZGlmCn0KAAAAAAAAAADECwAAAAAAAAAAAAAAAAAAAAAAAAIXAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pyslam/include/measmapmanagers.h",
			"settings":
			{
				"buffer_size": 5316,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADACgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3Nlcyk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldFNlcV9nSGsoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpNYXRyaXhYM2YgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihpbnQgdGssIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+IG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPiBrZHRyZWU7CgpzdGQ6OnZlY3RvcjxNYXRyaXhYWHVpbnQxNj4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAxwoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADHCgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRhbGlnblNlcU1lYXMoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKTWF0cml4WDNmIGdldGFsaWduU2VxTWVhc19laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwoKLy8tLS0tLS0tLS0tLS0tLS0tLUFsaWduZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24oaW50IHRrLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhczsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPiBvY3RyZWU7CnBjbDo6S2RUcmVlRkxBTk48cGNsOjpQb2ludFhZWj4ga2R0cmVlOwoKc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+IFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAMIKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADCCgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKGludCB0aywgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmludCB0azsKc3RkOjp2ZWN0b3I8cGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHI+IG1lYXM7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpNYXRyaXhYM2YgWHNlcVBvcyxWZWwsQW5nVmVsOwpzdGQ6OnVub3JkZXJlZF9tYXA8aW50LCBzdGQ6OnVub3JkZXJlZF9tYXA8aW50LEVpZ2VuOjpNYXRyaXg0Zj4gPiBpMUhpX3NlcTsKanNvbiBvcHRpb25zOwpwY2w6OkdlbmVyYWxpemVkSXRlcmF0aXZlQ2xvc2VzdFBvaW50PHBjbDo6UG9pbnRYWVosIHBjbDo6UG9pbnRYWVo+IGdpY3AsZ2ljcHNlcTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ0hrOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXAyRDsKcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj4gb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+IGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAADnCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADnCgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+IG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPiBrZHRyZWU7CgpzdGQ6OnZlY3RvcjxNYXRyaXhYWHVpbnQxNj4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAA8QoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxCgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+IFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAD0LAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA9CwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNZWFzMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGZsb2F0IHQpOwoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXMyRDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAAA9CwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA9CwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNZWFzMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGZsb2F0IHQpOwoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXMyRDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAAB3CwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3CwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxmbG9hdCB0KTsKdm9pZCBhZGRNZWFzMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGZsb2F0IHQpOwoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhczJEKGludCBrKQoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpNYXRyaXhYM2YgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzMkQ7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpNYXRyaXhYM2YgWHNlcVBvcyxWZWwsQW5nVmVsOwpzdGQ6OnVub3JkZXJlZF9tYXA8aW50LCBzdGQ6OnVub3JkZXJlZF9tYXA8aW50LEVpZ2VuOjpNYXRyaXg0Zj4gPiBpMUhpX3NlcTsKanNvbiBvcHRpb25zOwpwY2w6OkdlbmVyYWxpemVkSXRlcmF0aXZlQ2xvc2VzdFBvaW50PHBjbDo6UG9pbnRYWVosIHBjbDo6UG9pbnRYWVo+IGdpY3AsZ2ljcHNlcTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ0hrOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXAyRDsKcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBvY3RyZWU7CnBjbDo6S2RUcmVlRkxBTk48cGNsOjpQb2ludFhZWj46OlB0ciBrZHRyZWU7CgpzdGQ6OnZlY3RvcjxNYXRyaXhYWHVpbnQxNj4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAYQsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhCwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgyRCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KCk7CnZvaWQgc2V0UmVnaXN0ZXJlZFNlcUgoKTsKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBzZXRTZXFfZ0hrKCk7CnZvaWQgc2V0UmVsU3RhdGVzKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tLS1HZXR0ZXJzLS0tLS0tLS0tLS0tCkVpZ2VuOjpNYXRyaXhYZiBnZXRtZWFzX2VpZ2VuKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzMkQoaW50IGspCgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXMyRDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAABqCwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABqCwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhczJEKGludCBrKQoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpNYXRyaXhYM2YgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAABvCwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABvCwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspCgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+IFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAPYLAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD2CwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspCgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhc19ub3JvYWQoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCk1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+IFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAG4MAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpNYXRyaXhYM2YgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ck1hdHJpeFgzZiBnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ci8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+IFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAGwMAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABsDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAAB+DAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB+DAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAACFDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dW5vcmRlcmVkX21hcDxNYXRyaXhYWHVpbnQxNj4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAArAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dW5vcmRlcmVkX21hcDx1aW50MTZfdCxzdGQ6OnVub3JkZXJlZF9tYXA8dWludDE2X3QsTWF0cml4WFh1aW50MTY+ID4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAygwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADKDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dW5vcmRlcmVkX21hcDx1aW50MTZfdCxzdGQ6OnVub3JkZXJlZF9tYXA8dWludDE2X3Qsc3RkOjp1bm9yZGVyZWRfbWFwPHVpbnQxNl90LE1hdHJpeFhYdWludDE2PiA+ID4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAxAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADEDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnN0ZDo6dW5vcmRlcmVkX21hcDx1aW50MTZfdCxzdGQ6OnVub3JkZXJlZF9tYXA8dWludDE2X3Qsc3RkOjp1bm9yZGVyZWRfbWFwPHVpbnQxNl90LHVpbnQxNl90PiA+ID4gWGRpc3Q7CgoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAbAwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABsDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKY2xhc3MgTWFwTG9jYWxpemVyIHsKcHVibGljOgpNYXBMb2NhbGl6ZXIoc3RkOjpzdHJpbmcgb3B0ICk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRzdHIpOwp2b2lkIHJlc2V0SCgpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKdm9pZCBhZGRNYXAoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKdm9pZCBhZGRNYXAyRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwoKdm9pZCBzZXRnSGsoaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrICk7CnZvaWQgc2V0TG9va1VwRGlzdCgpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gc2V0U2VxX2dIaygpOwp2b2lkIHNldFJlbFN0YXRlcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tR2V0dGVycy0tLS0tLS0tLS0tLQpFaWdlbjo6TWF0cml4WGYgZ2V0bWVhc19laWdlbihpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhcyhpbnQgayk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWVhc19ub3JvYWQoaW50IGspOwoKZmxvYXQgZ2V0ZHQoKTsKVmVjdG9yNmYgTWFwUGNsbGltaXRzKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKHBjbDo6UG9pbnRYWVogbWluX3B0LHBjbDo6UG9pbnRYWVogbWF4X3B0KTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBsb2NhbF9laWdlbihFaWdlbjo6VmVjdG9yM2YgbGIsRWlnZW46OlZlY3RvcjNmIHViKTsKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXBfZWlnZW4oKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAoKTsKCgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfZWlnZW4oKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwMkQoKTsKCk1hdHJpeFgzZiBnZXR2ZWxvY2l0aWVzKCk7Ck1hdHJpeFgzZiBnZXRwb3NpdGlvbnMoKTsKTWF0cml4WDNmIGdldGFuZ3VsYXJ2ZWxvY2l0aWVzKCk7CgpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0U2VxX2dIaygpOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRzZXRTZXFfZ0hrKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhcyhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXNfbm9yb2FkKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CgpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZF9laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwovLy0tLS0tLS0tLS0tLS0tLS0tQWxpZ25lcnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCkJNYXRjaEFuZENvcnJICkJNYXRjaHNlcShpbnQgdDAsaW50IHRmLGludCB0ayxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGssYm9vbCBnaWNwPXRydWUpOwoKCi8vIGdIayB0YWtlcyBrLWZyYW1lIGxvY2FsIHRvIGdsb2FsIGluZXJ0aWFsIGZyYW1lCkVpZ2VuIDo6IE1hdHJpeDRmCmdpY3BfY29ycmVjdGlvbihwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBYc3JjcGNsLCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDRmPiZnSGtfZXN0KTsKCgoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7Ck1hdHJpeFgzZiBYc2VxUG9zLFZlbCxBbmdWZWw7CnN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsIHN0ZDo6dW5vcmRlcmVkX21hcDxpbnQsRWlnZW46Ok1hdHJpeDRmPiA+IGkxSGlfc2VxOwpqc29uIG9wdGlvbnM7CnBjbDo6R2VuZXJhbGl6ZWRJdGVyYXRpdmVDbG9zZXN0UG9pbnQ8cGNsOjpQb2ludFhZWiwgcGNsOjpQb2ludFhZWj4gZ2ljcCxnaWNwc2VxOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnSGs7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXA7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDJEOwpwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG9jdHJlZTsKcGNsOjpLZFRyZWVGTEFOTjxwY2w6OlBvaW50WFlaPjo6UHRyIGtkdHJlZTsKCnhkaXN0dHlwZSBYZGlzdDsKCgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAACVDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCk7CgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KCk7CnZvaWQgc2V0UmVnaXN0ZXJlZFNlcUgoKTsKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBzZXRTZXFfZ0hrKCk7CnZvaWQgc2V0UmVsU3RhdGVzKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tLS1HZXR0ZXJzLS0tLS0tLS0tLS0tCkVpZ2VuOjpNYXRyaXhYZiBnZXRtZWFzX2VpZ2VuKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzX25vcm9hZChpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhc19ub3JvYWQoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ci8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKeGRpc3R0eXBlIFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAG4MAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KCk7CnZvaWQgc2V0UmVnaXN0ZXJlZFNlcUgoKTsKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBzZXRTZXFfZ0hrKCk7CnZvaWQgc2V0UmVsU3RhdGVzKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tLS1HZXR0ZXJzLS0tLS0tLS0tLS0tCkVpZ2VuOjpNYXRyaXhYZiBnZXRtZWFzX2VpZ2VuKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzX25vcm9hZChpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhc19ub3JvYWQoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ci8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKeGRpc3R0eXBlIFhkaXN0OwoKCkJpbk1hdGNoIGJtOwp9OwoAAAAAAAAAAIsMAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KCk7CnZvaWQgc2V0UmVnaXN0ZXJlZFNlcUgoKTsKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBzZXRTZXFfZ0hrKCk7CnZvaWQgc2V0UmVsU3RhdGVzKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tLS1HZXR0ZXJzLS0tLS0tLS0tLS0tCkVpZ2VuOjpNYXRyaXhYZiBnZXRtZWFzX2VpZ2VuKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzKGludCBrKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtZWFzX25vcm9hZChpbnQgayk7CgpmbG9hdCBnZXRkdCgpOwpWZWN0b3I2ZiBNYXBQY2xsaW1pdHMoKTsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyCmdldG1hcGxvY2FsKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwocGNsOjpQb2ludFhZWiBtaW5fcHQscGNsOjpQb2ludFhZWiBtYXhfcHQpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcGxvY2FsX2VpZ2VuKEVpZ2VuOjpWZWN0b3IzZiBsYixFaWdlbjo6VmVjdG9yM2YgdWIpOwoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcF9laWdlbigpOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcCgpOwoKCkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKTWF0cml4WDNmIGdldHZlbG9jaXRpZXMoKTsKTWF0cml4WDNmIGdldHBvc2l0aW9ucygpOwpNYXRyaXhYM2YgZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kcyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldHNldFNlcV9nSGsoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhc19ub3JvYWQoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ci8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgoKQk1hdGNoQW5kQ29yckgKQk1hdGNoc2VxKGludCB0MCxpbnQgdGYsaW50IHRrLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIayxib29sIGdpY3A9dHJ1ZSk7CgoKLy8gZ0hrIHRha2VzIGstZnJhbWUgbG9jYWwgdG8gZ2xvYWwgaW5lcnRpYWwgZnJhbWUKRWlnZW4gOjogTWF0cml4NGYKZ2ljcF9jb3JyZWN0aW9uKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIFhzcmNwY2wsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4NGY+JmdIa19lc3QpOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgppbnQgdGs7CnN0ZDo6dmVjdG9yPHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyPiBtZWFzLG1lYXNfbm9yb2FkOwpzdGQ6OnZlY3RvcjxmbG9hdD4gVDsKTWF0cml4WDNmIFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKeGRpc3R0eXBlIFhkaXN0OwpzdGQ6OnZlY3RvcjxmbG9hdD4gWGRpc3RfbWluOwoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAnwwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfDAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KHN0ZDo6c3RyaW5nIGZpbGVuYW1lKTsKdm9pZCBzZXRSZWdpc3RlcmVkU2VxSCgpOwpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IHNldFNlcV9nSGsoKTsKdm9pZCBzZXRSZWxTdGF0ZXMoKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLUdldHRlcnMtLS0tLS0tLS0tLS0KRWlnZW46Ok1hdHJpeFhmIGdldG1lYXNfZWlnZW4oaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXMoaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXNfbm9yb2FkKGludCBrKTsKCmZsb2F0IGdldGR0KCk7ClZlY3RvcjZmIE1hcFBjbGxpbWl0cygpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwoRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChwY2w6OlBvaW50WFlaIG1pbl9wdCxwY2w6OlBvaW50WFlaIG1heF9wdCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwbG9jYWxfZWlnZW4oRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwX2VpZ2VuKCk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwKCk7CgoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcDJEX2VpZ2VuKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcDJEKCk7CgpNYXRyaXhYM2YgZ2V0dmVsb2NpdGllcygpOwpNYXRyaXhYM2YgZ2V0cG9zaXRpb25zKCk7Ck1hdHJpeFgzZiBnZXRhbmd1bGFydmVsb2NpdGllcygpOwoKRWlnZW46OlZlY3RvclhmIGdldExpa2VsaWhvb2RzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLGludCB0ayk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldFNlcV9nSGsoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXMoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZChpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwoKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19ub3JvYWRfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKLy8tLS0tLS0tLS0tLS0tLS0tLUFsaWduZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgWHNyY3BjbCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmludCB0azsKc3RkOjp2ZWN0b3I8cGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHI+IG1lYXMsbWVhc19ub3JvYWQ7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpNYXRyaXhYM2YgWHNlcVBvcyxWZWwsQW5nVmVsOwpzdGQ6OnVub3JkZXJlZF9tYXA8aW50LCBzdGQ6OnVub3JkZXJlZF9tYXA8aW50LEVpZ2VuOjpNYXRyaXg0Zj4gPiBpMUhpX3NlcTsKanNvbiBvcHRpb25zOwpwY2w6OkdlbmVyYWxpemVkSXRlcmF0aXZlQ2xvc2VzdFBvaW50PHBjbDo6UG9pbnRYWVosIHBjbDo6UG9pbnRYWVo+IGdpY3AsZ2ljcHNlcTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ0hrOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXAyRDsKcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBvY3RyZWU7CnBjbDo6S2RUcmVlRkxBTk48cGNsOjpQb2ludFhZWj46OlB0ciBrZHRyZWU7Cgp4ZGlzdHR5cGUgWGRpc3Q7CnN0ZDo6dmVjdG9yPGZsb2F0PiBYZGlzdF9taW47CgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAAAFDQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAFDQAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KHN0ZDo6c3RyaW5nIGZpbGVuYW1lKTsKdm9pZCBzZXRSZWdpc3RlcmVkU2VxSCgpOwpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IHNldFNlcV9nSGsoKTsKdm9pZCBzZXRSZWxTdGF0ZXMoKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLUdldHRlcnMtLS0tLS0tLS0tLS0KRWlnZW46Ok1hdHJpeFhmIGdldG1lYXNfZWlnZW4oaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXMoaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXNfbm9yb2FkKGludCBrKTsKCmZsb2F0IGdldGR0KCk7ClZlY3RvcjZmIE1hcFBjbGxpbWl0cygpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwoRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChwY2w6OlBvaW50WFlaIG1pbl9wdCxwY2w6OlBvaW50WFlaIG1heF9wdCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwbG9jYWxfZWlnZW4oRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwX2VpZ2VuKCk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwKCk7CgoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcDJEX2VpZ2VuKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcDJEKCk7CgpNYXRyaXhYM2YgZ2V0dmVsb2NpdGllcygpOwpNYXRyaXhYM2YgZ2V0cG9zaXRpb25zKCk7Ck1hdHJpeFgzZiBnZXRhbmd1bGFydmVsb2NpdGllcygpOwoKRWlnZW46OlZlY3RvclhmIGdldExpa2VsaWhvb2RzX29jdHJlZShjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHNfbG9va3VwKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLGludCB0ayk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldFNlcV9nSGsoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXMoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZChpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwoKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19ub3JvYWRfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKLy8tLS0tLS0tLS0tLS0tLS0tLUFsaWduZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgWHNyY3BjbCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmludCB0azsKc3RkOjp2ZWN0b3I8cGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHI+IG1lYXMsbWVhc19ub3JvYWQ7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpNYXRyaXhYM2YgWHNlcVBvcyxWZWwsQW5nVmVsOwpzdGQ6OnVub3JkZXJlZF9tYXA8aW50LCBzdGQ6OnVub3JkZXJlZF9tYXA8aW50LEVpZ2VuOjpNYXRyaXg0Zj4gPiBpMUhpX3NlcTsKanNvbiBvcHRpb25zOwpwY2w6OkdlbmVyYWxpemVkSXRlcmF0aXZlQ2xvc2VzdFBvaW50PHBjbDo6UG9pbnRYWVosIHBjbDo6UG9pbnRYWVo+IGdpY3AsZ2ljcHNlcTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ0hrOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXAyRDsKcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBvY3RyZWU7CnBjbDo6S2RUcmVlRkxBTk48cGNsOjpQb2ludFhZWj46OlB0ciBrZHRyZWU7Cgp4ZGlzdHR5cGUgWGRpc3Q7CnN0ZDo6dmVjdG9yPGZsb2F0PiBYZGlzdF9taW47CgpCaW5NYXRjaCBibTsKfTsKAAAAAAAAAAAYDQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYDQAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KHN0ZDo6c3RyaW5nIGZpbGVuYW1lKTsKdm9pZCBzZXRSZWdpc3RlcmVkU2VxSCgpOwpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IHNldFNlcV9nSGsoKTsKdm9pZCBzZXRSZWxTdGF0ZXMoKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLUdldHRlcnMtLS0tLS0tLS0tLS0KRWlnZW46Ok1hdHJpeFhmIGdldG1lYXNfZWlnZW4oaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXMoaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXNfbm9yb2FkKGludCBrKTsKCmZsb2F0IGdldGR0KCk7ClZlY3RvcjZmIE1hcFBjbGxpbWl0cygpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwoRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChwY2w6OlBvaW50WFlaIG1pbl9wdCxwY2w6OlBvaW50WFlaIG1heF9wdCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwbG9jYWxfZWlnZW4oRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwX2VpZ2VuKCk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwKCk7CgoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcDJEX2VpZ2VuKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcDJEKCk7CgpNYXRyaXhYM2YgZ2V0dmVsb2NpdGllcygpOwpNYXRyaXhYM2YgZ2V0cG9zaXRpb25zKCk7Ck1hdHJpeFgzZiBnZXRhbmd1bGFydmVsb2NpdGllcygpOwoKRWlnZW46OlZlY3RvclhmIGdldExpa2VsaWhvb2RzX29jdHJlZShjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHNfbG9va3VwKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLGludCB0ayk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldFNlcV9nSGsoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXMoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZChpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwoKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19ub3JvYWRfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKLy8tLS0tLS0tLS0tLS0tLS0tLUFsaWduZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgWHNyY3BjbCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmludCB0azsKc3RkOjp2ZWN0b3I8cGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHI+IG1lYXMsbWVhc19ub3JvYWQ7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpzdGQ6OnZlY3RvcjxFaWdlbjo6VmVjdG9yM2Y+IFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKeGRpc3R0eXBlIFhkaXN0OwpzdGQ6OnZlY3RvcjxmbG9hdD4gWGRpc3RfbWluOwoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAUQ0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABRDQAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgoKc3RydWN0IEJNYXRjaEFuZENvcnJIIHsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gc29sczsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtjb3JyOwp9OwoKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgcmVzZXRIKCk7CgovLy0tLS0tLS0tLS0tLS0tLS0tU2V0dGVycy0tLS0tLS0tLS0tLS0tLS0tLQp2b2lkIGFkZE1lYXMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWG5vcm9hZCxmbG9hdCB0KTsKCgp2b2lkIGFkZE1hcChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgpOwp2b2lkIGFkZE1hcDJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7Cgp2b2lkIHNldGdIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGsgKTsKdm9pZCBzZXRMb29rVXBEaXN0KHN0ZDo6c3RyaW5nIGZpbGVuYW1lKTsKdm9pZCBzZXRSZWdpc3RlcmVkU2VxSCgpOwpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IHNldFNlcV9nSGsoKTsKdm9pZCBzZXRSZWxTdGF0ZXMoKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLUdldHRlcnMtLS0tLS0tLS0tLS0KRWlnZW46Ok1hdHJpeFhmIGdldG1lYXNfZWlnZW4oaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXMoaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXNfbm9yb2FkKGludCBrKTsKCmZsb2F0IGdldGR0KCk7ClZlY3RvcjZmIE1hcFBjbGxpbWl0cygpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwoRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChwY2w6OlBvaW50WFlaIG1pbl9wdCxwY2w6OlBvaW50WFlaIG1heF9wdCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwbG9jYWxfZWlnZW4oRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwX2VpZ2VuKCk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwKCk7CgoKRWlnZW46Ok1hdHJpeFhmIGdldG1hcDJEX2VpZ2VuKCk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1hcDJEKCk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6VmVjdG9yM2Y+IGdldHZlbG9jaXRpZXMoKTsKc3RkOjp2ZWN0b3I8RWlnZW46OlZlY3RvcjNmPiBnZXRwb3NpdGlvbnMoKTsKc3RkOjp2ZWN0b3I8RWlnZW46OlZlY3RvcjNmPiBnZXRhbmd1bGFydmVsb2NpdGllcygpOwoKRWlnZW46OlZlY3RvclhmIGdldExpa2VsaWhvb2RzX29jdHJlZShjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwpFaWdlbjo6VmVjdG9yWGYgZ2V0TGlrZWxpaG9vZHNfbG9va3VwKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLGludCB0ayk7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdldFNlcV9nSGsoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayk7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBnZXRhbGlnblNlcU1lYXMoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzX25vcm9hZChpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwoKRWlnZW4gOjogTWF0cml4WGYgZ2V0YWxpZ25TZXFNZWFzX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19ub3JvYWRfZWlnZW4oaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKLy8tLS0tLS0tLS0tLS0tLS0tLUFsaWduZXJzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgWHNyY3BjbCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmludCB0azsKc3RkOjp2ZWN0b3I8cGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHI+IG1lYXMsbWVhc19ub3JvYWQ7CnN0ZDo6dmVjdG9yPGZsb2F0PiBUOwpzdGQ6OnZlY3RvcjxFaWdlbjo6VmVjdG9yM2Y+IFhzZXFQb3MsVmVsLEFuZ1ZlbDsKc3RkOjp1bm9yZGVyZWRfbWFwPGludCwgc3RkOjp1bm9yZGVyZWRfbWFwPGludCxFaWdlbjo6TWF0cml4NGY+ID4gaTFIaV9zZXE7Cmpzb24gb3B0aW9uczsKcGNsOjpHZW5lcmFsaXplZEl0ZXJhdGl2ZUNsb3Nlc3RQb2ludDxwY2w6OlBvaW50WFlaLCBwY2w6OlBvaW50WFlaPiBnaWNwLGdpY3BzZXE7CgpzdGQ6OnZlY3RvcjxFaWdlbjo6TWF0cml4NGY+IGdIazsKCnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcDsKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwMkQ7CnBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgb2N0cmVlOwpwY2w6OktkVHJlZUZMQU5OPHBjbDo6UG9pbnRYWVo+OjpQdHIga2R0cmVlOwoKeGRpc3R0eXBlIFhkaXN0OwpzdGQ6OnZlY3RvcjxmbG9hdD4gWGRpc3RfbWluOwoKQmluTWF0Y2ggYm07Cn07CgAAAAAAAAAAfQ0AAAAAAAAAAAAAAAAAAAAAAAA4EgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMCAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOsRAAAAAAAA7BEAAAAAAAAAAAAA7BEAAAAAAADtEQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrEQAAAAAAAOsRAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAOwRAAAAAAAA/hEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsEQAAAAAAAOwRAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAOsRAAAAAAAAIhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrEQAAAAAAAOsRAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"paste",
					null,
					"AgAAAA0SAAAAAAAAHxIAAAAAAAAAAAAAHxIAAAAAAAAfEgAAAAAAABQAAABibUhzb2xzX2FzeW5jX2Z1dHVyZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANEgAAAAAAACESAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "voli"
					},
					"BQAAAPcRAAAAAAAA+BEAAAAAAAAAAAAA+BEAAAAAAAD4EQAAAAAAABQAAABCTWF0Y2hBbmRDb3JySF9hc3luY/gRAAAAAAAA+REAAAAAAAAAAAAA+REAAAAAAAD6EQAAAAAAAAAAAAD6EQAAAAAAAPsRAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALEgAAAAAAAPcRAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAPoRAAAAAAAA+hEAAAAAAAABAAAAafkRAAAAAAAA+REAAAAAAAABAAAAbA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7EQAAAAAAAPsRAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAAPkRAAAAAAAA+hEAAAAAAAAAAAAA+hEAAAAAAAD7EQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5EQAAAAAAAPkRAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABASAAAAAAAAERIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQEgAAAAAAABASAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAABESAAAAAAAAJBIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAREgAAAAAAABESAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACQSAAAAAAAAJRIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkEgAAAAAAACQSAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACUSAAAAAAAAJhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlEgAAAAAAACUSAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"paste",
					null,
					"AQAAABESAAAAAAAAIxIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAREgAAAAAAABESAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"revert",
					null,
					"BgAAAAAAAAAAAAAAAAAAAAAAAACZEgAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgojaW5jbHVkZSAicGNsX2hlbHBlcnMuaCIKI2luY2x1ZGUgImJpbm1hdGNoLmgiCiNpbmNsdWRlICJsb2NhbGl6ZS5oIgojaW5jbHVkZSAicGNsX3Zpc3VhbC5oIgoKCnN0cnVjdCBCTWF0Y2hBbmRDb3JySCB7CiAgICAgICAgc3RkOjp2ZWN0b3I8QmluTWF0Y2hTb2w+IHNvbHM7CiAgICAgICAgRWlnZW4gOjogTWF0cml4NGYgZ0hrY29ycjsKICAgICAgICBib29sIGlzRG9uZTsKfTsKCnN0cnVjdCBCTWF0Y2hBbmRDb3JySF9hc3luYyB7CiAgICAgICAgQk1hdGNoQW5kQ29yckggYm1Ic29sOwogICAgICAgIGludCB0azsKICAgICAgICBpbnQgdDA7CiAgICAgICAgaW50IHRmOwogICAgICAgIGJvb2wgZG9fZ2ljcDsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtlc3RfaW5pdGlhbDsKICAgICAgICBFaWdlbiA6OiBNYXRyaXg0ZiBnSGtlc3RfZmluYWw7CgoKICAgICAgICAvLyBzdGQ6OmNocm9ubzo6dGltZV9wb2ludDxzdGQ6OmNocm9ubzo6c3lzdGVtX2Nsb2NrPiBzdDsKICAgICAgICAvLyBzdGQ6OmNocm9ubzo6dGltZV9wb2ludDxzdGQ6OmNocm9ubzo6c3lzdGVtX2Nsb2NrPiBldDsKICAgICAgICBmbG9hdCB0aW1lX3Rha2VuOwogICAgICAgIGJvb2wgaXNEb25lOwoKfTsKCgpjbGFzcyBNYXBMb2NhbGl6ZXIgewpwdWJsaWM6Ck1hcExvY2FsaXplcihzdGQ6OnN0cmluZyBvcHQgKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdHN0cik7CnZvaWQgc2V0Qk1PcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7CnZvaWQgcmVzZXRIKCk7CnZvaWQgY2xlYW5VcChpbnQgayk7Cgp2b2lkIHBsb3RzaW0oY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZSk7Cgp2b2lkIGF1dG9SZWFkTWVhcyhzdGQ6OnN0cmluZyBmb2xkZXIpOwpFaWdlbjo6TWF0cml4WGYgZ2V0TWVhcygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLVNldHRlcnMtLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZCBhZGRNZWFzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhub3JvYWQsZmxvYXQgdCk7CgoKCnZvaWQgYWRkTWFwKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWCk7CnZvaWQgYWRkTWFwMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYKTsKCnZvaWQgc2V0Z0hrKGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayApOwp2b2lkIHNldExvb2tVcERpc3Qoc3RkOjpzdHJpbmcgZmlsZW5hbWUpOwp2b2lkIHNldFJlZ2lzdGVyZWRTZXFIKCk7CnZvaWQgc2V0UmVnaXN0ZXJlZFNlcUhfYXN5bmMoKTsKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBzZXRTZXFfZ0hrKCk7CnZvaWQgc2V0UmVsU3RhdGVzKCk7CnZvaWQgc2V0UmVsU3RhdGVzX2FzeW5jKCk7CnZvaWQgY29tcHV0ZUhsZXZlbHMoKTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLUdldHRlcnMtLS0tLS0tLS0tLS0KRWlnZW46Ok1hdHJpeFhmIGdldG1lYXNfZWlnZW4oaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXMoaW50IGspOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGdldG1lYXNfbm9yb2FkKGludCBrKTsKCmZsb2F0IGdldGR0KCk7ClZlY3RvcjZmIE1hcFBjbGxpbWl0cygpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIKZ2V0bWFwbG9jYWwoRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cgpnZXRtYXBsb2NhbChwY2w6OlBvaW50WFlaIG1pbl9wdCxwY2w6OlBvaW50WFlaIG1heF9wdCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwbG9jYWxfZWlnZW4oRWlnZW46OlZlY3RvcjNmIGxiLEVpZ2VuOjpWZWN0b3IzZiB1Yik7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwX2VpZ2VuKCk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgZ2V0bWFwKCk7CgpFaWdlbjo6TWF0cml4WGYgZ2V0bWFwMkRfbm9yb2FkX3Jlc19laWdlbihzdGQgOjogdmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CkVpZ2VuOjpNYXRyaXhYZiBnZXRtYXAyRF9laWdlbigpOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBnZXRtYXAyRCgpOwoKc3RkOjp2ZWN0b3I8RWlnZW46OlZlY3RvcjNmPiBnZXR2ZWxvY2l0aWVzKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpWZWN0b3IzZj4gZ2V0cG9zaXRpb25zKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpWZWN0b3IzZj4gZ2V0YW5ndWxhcnZlbG9jaXRpZXMoKTsKCkVpZ2VuOjpWZWN0b3JYZiBnZXRMaWtlbGlob29kc19vY3RyZWUoY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsaW50IHRrKTsKRWlnZW46OlZlY3RvclhmIGdldExpa2VsaWhvb2RzX2xvb2t1cChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcyxpbnQgdGspOwoKc3RkOjp2ZWN0b3I8RWlnZW46Ok1hdHJpeDRmPiBnZXRTZXFfZ0hrKCk7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0aTFIaV9zZXEoKTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ2V0c2V0U2VxX2dIayhpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGspOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgZ2V0YWxpZ25TZXFNZWFzKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7CnBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGdldGFsaWduU2VxTWVhc19ub3JvYWQoaW50IHQwLGludCB0ZixpbnQgdGssIEVpZ2VuOjpNYXRyaXg0ZiBnSGssc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyxpbnQgZGltKTsKCkVpZ2VuIDo6IE1hdHJpeFhmIGdldGFsaWduU2VxTWVhc19laWdlbihpbnQgdDAsaW50IHRmLGludCB0aywgRWlnZW46Ok1hdHJpeDRmIGdIayxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzLGludCBkaW0pOwpFaWdlbiA6OiBNYXRyaXhYZiBnZXRhbGlnblNlcU1lYXNfbm9yb2FkX2VpZ2VuKGludCB0MCxpbnQgdGYsaW50IHRrLCBFaWdlbjo6TWF0cml4NGYgZ0hrLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsaW50IGRpbSk7Ci8vLS0tLS0tLS0tLS0tLS0tLS1BbGlnbmVycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0Kdm9pZApCTWF0Y2hzZXFfYXN5bmMoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrZXN0LGJvb2wgZ2ljcCk7CgpCTWF0Y2hBbmRDb3JySF9hc3luYwpnZXRCTWF0Y2hzZXFfYXN5bmMoKTsKCkJNYXRjaEFuZENvcnJIX2FzeW5jCkJNYXRjaHNlcV9hc3luY19jYWxsZXIoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrZXN0LGJvb2wgZ2ljcCk7CgpCTWF0Y2hBbmRDb3JySApCTWF0Y2hzZXEoaW50IHQwLGludCB0ZixpbnQgdGssY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrLGJvb2wgZ2ljcD10cnVlKTsKCgovLyBnSGsgdGFrZXMgay1mcmFtZSBsb2NhbCB0byBnbG9hbCBpbmVydGlhbCBmcmFtZQpFaWdlbiA6OiBNYXRyaXg0ZgpnaWNwX2NvcnJlY3Rpb24ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgWHNyY3BjbCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXg0Zj4mZ0hrX2VzdCk7CgoKdGltZXJkaWN0CmdldHRpbWVycygpOwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKaW50IHRrOwpzdGQ6OnZlY3RvcjxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0cj4gbWVhcyxtZWFzX25vcm9hZDsKc3RkOjp2ZWN0b3I8ZmxvYXQ+IFQ7CnN0ZDo6dmVjdG9yPEVpZ2VuOjpWZWN0b3IzZj4gWHNlcVBvcyxWZWwsQW5nVmVsOwpzdGQ6OnVub3JkZXJlZF9tYXA8aW50LCBzdGQ6OnVub3JkZXJlZF9tYXA8aW50LEVpZ2VuOjpNYXRyaXg0Zj4gPiBpMUhpX3NlcTsKanNvbiBvcHRpb25zOwpwY2w6OkdlbmVyYWxpemVkSXRlcmF0aXZlQ2xvc2VzdFBvaW50PHBjbDo6UG9pbnRYWVosIHBjbDo6UG9pbnRYWVo+IGdpY3AsZ2ljcHNlcTsKCnN0ZDo6dmVjdG9yPEVpZ2VuOjpNYXRyaXg0Zj4gZ0hrOwoKcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwOwpwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBtYXAyRDsKcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBvY3RyZWU7CnBjbDo6S2RUcmVlRkxBTk48cGNsOjpQb2ludFhZWj46OlB0ciBrZHRyZWU7Cgp4ZGlzdHR5cGUgWGRpc3Q7CnN0ZDo6dmVjdG9yPGZsb2F0PiBYZGlzdF9taW4sWGRpc3RfbWF4OwoKQmluTWF0Y2ggYm07CnN0ZDo6ZnV0dXJlPEJNYXRjaEFuZENvcnJIX2FzeW5jPiBibUhzb2xzX2FzeW5jX2Z1dHVyZTsKc3RkOjpmdXR1cmU8dm9pZD4gc2VxcmVnaXN0ZXJfZnV0dXJlOwpzdGQ6OmZ1dHVyZTx2b2lkPiBzZXRyZWxzdGF0ZXNfZnV0dXJlOwoKc2VxcmVnaXN0ZXJfZnV0dXJlCgpLaXR0aVBsb3QgcGxvdHRlcjsKcXVldWU8RWlnZW46Ok1hdHJpeFhmPiBtZWFzUTsKCnRpbWVyZGljdHB0ciB0aW1lcnB0cjsKfTsKAAAAAAAAAADEFAAAAAAAAAAAAAAAAAAAAAAAAMQUAAAAAAAAAAAAAAAAAAAAAAAAxBQAAAAAAAAAAAAAAAAAAAAAAADEFAAAAAAAAAAAAAAAAAAAAAAAAMQUAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjEgAAAAAAACMSAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pyslam/src/measmapmanagers.cpp",
			"settings":
			{
				"buffer_size": 40799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					490,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8cAAAAAAAArxwAAAAAAAAAAAAAAADwvw"
				],
				[
					491,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8cAAAAAAAArxwAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"left_delete",
					null,
					"AQAAAKg2AAAAAAAAqDYAAAAAAAAEAAAAYXV0bw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoNgAAAAAAAKw2AAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					2,
					"right_delete",
					null,
					"AgAAAO07AAAAAAAA7TsAAAAAAAAEAAAAYXV0b+07AAAAAAAA7TsAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtOwAAAAAAAPE7AAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWNgAAAAAAAJw2AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2022 paper/LidarLocalozation/figures/histplots.py",
			"settings":
			{
				"buffer_size": 3690,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pyslam/src/pcl_helpers.cpp",
			"settings":
			{
				"buffer_size": 1144,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACTAwAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQ9ZmFsc2UpewoJcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQzEobmV3IHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPihYLnJvd3MoKSwxKSk7CglpbnQgaT0wOwogICAgZm9yKGF1dG8mIHA6ICpDMSkgewogICAgICAgIHAueCA9IFgoaSwwKTsKICAgICAgICBwLnkgPSBYKGksMSk7CiAgICAgICAgcC56ID0gWChpLDIpOwogICAgICAgICsraTsKICAgIH0KCglpZihhcHBlbmQ9PWZhbHNlKQoJCUM9QzE7CgllbHNlewoJCUMrPUMxOwoJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBDLEVpZ2VuOjpNYXRyaXhYZiAmWCl7CglYLnJlc2l6ZShDLT5zaXplKCksMyk7CglpbnQgaT0wOwogICAgZm9yKGF1dG8mIHA6ICpDMSkgewogICAgICAgIFgoaSwwKSA9IHAueDsKICAgICAgICBYKGksMSkgPSBwLnk7CiAgICAgICAgWChpLDIpID0gcC56OwogICAgICAgICsraTsKICAgIH0KCn0KCnZvaWQgcGNsX2ZpbHRlcl9jbG91ZChwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6dmVjdG9yPGZsb2F0PiByZXMpewoJcGNsOjpWb3hlbEdyaWQ8cGNsOjpQb2ludFhZWj4gc29yOwogICAgc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKICAgIHNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKICAgIHNvci5maWx0ZXIgKCpvdXRwdXRjbGQpOwp9AAAAAAAAAABFBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQ9ZmFsc2UpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCUMrPUMxOwoJCQkJCQkJCX0KCn0KCnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgQyxFaWdlbjo6TWF0cml4WGYgJlgpewoJCQkJCQkJCVgucmVzaXplKEMtPnNpemUoKSwzKTsKCQkJCQkJCQlpbnQgaT0wOwoJCQkJCQkJCWZvcihhdXRvJiBwOiAqQzEpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpDb25zdFB0ciBpbnB1dGNsZCxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBvdXRwdXRjbGQsc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyl7CgkJCQkJCQkJcGNsOjpWb3hlbEdyaWQ8cGNsOjpQb2ludFhZWj4gc29yOwoJCQkJCQkJCXNvci5zZXRJbnB1dENsb3VkIChpbnB1dGNsZCk7CgkJCQkJCQkJc29yLnNldExlYWZTaXplKHJlc1swXSwgcmVzWzFdLCByZXNbMl0pOwoJCQkJCQkJCXNvci5maWx0ZXIgKCpvdXRwdXRjbGQpOwp9CgAAAAAAAAAAOwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA7BAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQ9ZmFsc2UpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCUMrPUMxOwoJCQkJCQkJCX0KCn0KCnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46Ok1hdHJpeFhmICZYKXsKCQkJCQkJCQlYLnJlc2l6ZShDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMxKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAAA1BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA1BAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCUMrPUMxOwoJCQkJCQkJCX0KCn0KCnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46Ok1hdHJpeFhmICZYKXsKCQkJCQkJCQlYLnJlc2l6ZShDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMxKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAAA3BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA3BAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6TWF0cml4WGYgJlgpewoJCQkJCQkJCVgucmVzaXplKEMtPnNpemUoKSwzKTsKCQkJCQkJCQlpbnQgaT0wOwoJCQkJCQkJCWZvcihhdXRvJiBwOiAqQzEpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAADYEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA2BAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6TWF0cml4WGYgJlgpewoJCQkJCQkJCVgucmVzaXplKEMtPnNpemUoKSwzKTsKCQkJCQkJCQlpbnQgaT0wOwoJCQkJCQkJCWZvcihhdXRvJiBwOiAqQykgewoJCQkJCQkJCQkJCQkJCQkJWChpLDApID0gcC54OwoJCQkJCQkJCQkJCQkJCQkJWChpLDEpID0gcC55OwoJCQkJCQkJCQkJCQkJCQkJWChpLDIpID0gcC56OwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCn0KCnZvaWQgcGNsX2ZpbHRlcl9jbG91ZChwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBpbnB1dGNsZCxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciBvdXRwdXRjbGQsc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyl7CgkJCQkJCQkJcGNsOjpWb3hlbEdyaWQ8cGNsOjpQb2ludFhZWj4gc29yOwoJCQkJCQkJCXNvci5zZXRJbnB1dENsb3VkIChpbnB1dGNsZCk7CgkJCQkJCQkJc29yLnNldExlYWZTaXplKHJlc1swXSwgcmVzWzFdLCByZXNbMl0pOwoJCQkJCQkJCXNvci5maWx0ZXIgKCpvdXRwdXRjbGQpOwp9CgAAAAAAAAAARAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6UmVmPEVpZ2VuIDo6IE1hdHJpeFhmPiYgWCl7CgkJCQkJCQkJWC5yZXNpemUoQy0+c2l6ZSgpLDMpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAABJBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxjb25zdCBFaWdlbjo6UmVmPEVpZ2VuIDo6IE1hdHJpeFhmPiZYKXsKCQkJCQkJCQlYLnJlc2l6ZShDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAEkEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeFhmPiZYKXsKCQkJCQkJCQlYLnJlc2l6ZShDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAEQEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4mWCl7CgkJCQkJCQkJWC5yZXNpemUoQy0+c2l6ZSgpLDMpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAABDBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABDBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj5YKXsKCQkJCQkJCQlYLnJlc2l6ZShDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAGMEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4gWCl7CgkJCQkJCQkJWC49RWlnZW4gOjogTWF0cml4WGY+OjpaZXJvKEMtPnNpemUoKSwzKTsKCQkJCQkJCQlpbnQgaT0wOwoJCQkJCQkJCWZvcihhdXRvJiBwOiAqQykgewoJCQkJCQkJCQkJCQkJCQkJWChpLDApID0gcC54OwoJCQkJCQkJCQkJCQkJCQkJWChpLDEpID0gcC55OwoJCQkJCQkJCQkJCQkJCQkJWChpLDIpID0gcC56OwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCn0KCnZvaWQgcGNsX2ZpbHRlcl9jbG91ZChwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciAgJiBpbnB1dGNsZCxwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OlB0ciAgJiBvdXRwdXRjbGQsc3RkOjp2ZWN0b3I8ZmxvYXQ+IHJlcyl7CgkJCQkJCQkJcGNsOjpWb3hlbEdyaWQ8cGNsOjpQb2ludFhZWj4gc29yOwoJCQkJCQkJCXNvci5zZXRJbnB1dENsb3VkIChpbnB1dGNsZCk7CgkJCQkJCQkJc29yLnNldExlYWZTaXplKHJlc1swXSwgcmVzWzFdLCByZXNbMl0pOwoJCQkJCQkJCXNvci5maWx0ZXIgKCpvdXRwdXRjbGQpOwp9CgAAAAAAAAAAYgQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4gWCl7CgkJCQkJCQkJWD1FaWdlbiA6OiBNYXRyaXhYZj46Olplcm8oQy0+c2l6ZSgpLDMpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAABhBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4gWCl7CgkJCQkJCQkJWD1FaWdlbiA6OiBNYXRyaXhYZjo6WmVybyhDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAFUEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbiA6OiBNYXRyaXhYZiYgWCl7CgkJCQkJCQkJWD1FaWdlbiA6OiBNYXRyaXhYZjo6WmVybyhDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAGEEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4gWCl7CgkJCQkJCQkJWD1FaWdlbiA6OiBNYXRyaXhYZjo6WmVybyhDLT5zaXplKCksMyk7CgkJCQkJCQkJaW50IGk9MDsKCQkJCQkJCQlmb3IoYXV0byYgcDogKkMpIHsKCQkJCQkJCQkJCQkJCQkJCVgoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgoaSwxKSA9IHAueTsKCQkJCQkJCQkJCQkJCQkJCVgoaSwyKSA9IHAuejsKCQkJCQkJCQkJCQkJCQkJCSsraTsKCQkJCQkJCQl9Cgp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAGIEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4mIFgpewoJCQkJCQkJCVg9RWlnZW4gOjogTWF0cml4WGY6Olplcm8oQy0+c2l6ZSgpLDMpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDKSB7CgkJCQkJCQkJCQkJCQkJCQlYKGksMCkgPSBwLng7CgkJCQkJCQkJCQkJCQkJCQlYKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYKGksMikgPSBwLno7CgkJCQkJCQkJCQkJCQkJCQkrK2k7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKXsKCQkJCQkJCQlwY2w6OlZveGVsR3JpZDxwY2w6OlBvaW50WFlaPiBzb3I7CgkJCQkJCQkJc29yLnNldElucHV0Q2xvdWQgKGlucHV0Y2xkKTsKCQkJCQkJCQlzb3Iuc2V0TGVhZlNpemUocmVzWzBdLCByZXNbMV0sIHJlc1syXSk7CgkJCQkJCQkJc29yLmZpbHRlciAoKm91dHB1dGNsZCk7Cn0KAAAAAAAAAACFBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAACFBAAAI2luY2x1ZGUgInBjbF9oZWxwZXJzLmgiCgoKdm9pZCBlaWdlbjJwY2woY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIEMsYm9vbCBhcHBlbmQpewoJCQkJCQkJCXBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMxKG5ldyBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4oWC5yb3dzKCksMSkpOwoJCQkJCQkJCWludCBpPTA7CgkJCQkJCQkJZm9yKGF1dG8mIHA6ICpDMSkgewoJCQkJCQkJCQkJCQkJCQkJcC54ID0gWChpLDApOwoJCQkJCQkJCQkJCQkJCQkJcC55ID0gWChpLDEpOwoJCQkJCQkJCQkJCQkJCQkJcC56ID0gWChpLDIpOwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCgkJCQkJCQkJaWYoYXBwZW5kPT1mYWxzZSkKCQkJCQkJCQkJCQkJCQkJCUM9QzE7CgkJCQkJCQkJZWxzZXsKCQkJCQkJCQkJCQkJCQkJCSpDKz0qQzE7CgkJCQkJCQkJfQoKfQoKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4mIFgpewoJCQkJCQkJCUVpZ2VuIDo6IE1hdHJpeFhmIFgxPUVpZ2VuIDo6IE1hdHJpeFhmOjpaZXJvKEMtPnNpemUoKSwzKTsKCQkJCQkJCQlpbnQgaT0wOwoJCQkJCQkJCWZvcihhdXRvJiBwOiAqQykgewoJCQkJCQkJCQkJCQkJCQkJWDEoaSwwKSA9IHAueDsKCQkJCQkJCQkJCQkJCQkJCVgxKGksMSkgPSBwLnk7CgkJCQkJCQkJCQkJCQkJCQlYMShpLDIpID0gcC56OwoJCQkJCQkJCQkJCQkJCQkJKytpOwoJCQkJCQkJCX0KCQkJCQkJCQlYPVgxOwp9Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpewoJCQkJCQkJCXBjbDo6Vm94ZWxHcmlkPHBjbDo6UG9pbnRYWVo+IHNvcjsKCQkJCQkJCQlzb3Iuc2V0SW5wdXRDbG91ZCAoaW5wdXRjbGQpOwoJCQkJCQkJCXNvci5zZXRMZWFmU2l6ZShyZXNbMF0sIHJlc1sxXSwgcmVzWzJdKTsKCQkJCQkJCQlzb3IuZmlsdGVyICgqb3V0cHV0Y2xkKTsKfQoAAAAAAAAAAHgEAAAAAAAAAAAAAAAAAAAAAAAAeAQAAAAAAAAAAAAAAAAAAAAAAAB4BAAAAAAAAAAAAAAAAAAAAAAAAHgEAAAAAAAAAAAAAAAAAAAAAAAAeAQAAAAAAAAAAAAAAAAAAAAAAAB4BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "pyslam/src/donseg.cpp",
			"settings":
			{
				"buffer_size": 6418,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/pf.h",
			"settings":
			{
				"buffer_size": 311,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD0AAAAAAAAAPgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAPQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "pyslam/include/localize.h",
			"settings":
			{
				"buffer_size": 1359,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACHBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLAogICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2RfbG9va3VwKGNvbnN0IHN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiAmWGRpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAAjQQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLAogICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2RfbG9va3VwKGNvbnN0IHN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiAmWGRpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAAqwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACrBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLAogICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2RfbG9va3VwKGNvbnN0IHN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiAmWGRpc3QsIGNvbnN0IHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAArAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLAogICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2RfbG9va3VwKGNvbnN0IHN0ZDo6dmVjdG9yPE1hdHJpeFhYdWludDE2PiAmWGRpc3QsIGNvbnN0IHN0ZDo6dmVjdG9yPGZsb2F0PiYgcmVzLAogICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwoKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAoY29uc3QgcGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj4mIG1hcG9jdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKGNvbnN0IHBjbDo6S2RUcmVlPHBjbDo6UG9pbnRYWVo+JiBtYXBrZHRyZWUsY29uc3QgcGNsOjpQb2ludFhZWiAmIHNlYXJjaFBvaW50LGZsb2F0IGRtYXgpOwoAAAAAAAAAAK4EAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACuBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBvY3RyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZF9sb29rdXAoY29uc3Qgc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+ICZYZGlzdCwgY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiByZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChjb25zdCBwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPiYgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAoY29uc3QgcGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj4mIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAArAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBvY3RyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZF9sb29rdXAoY29uc3Qgc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+ICZYZGlzdCwgY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiByZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKGNvbnN0IHBjbDo6S2RUcmVlPHBjbDo6UG9pbnRYWVo+JiBtYXBrZHRyZWUsY29uc3QgcGNsOjpQb2ludFhZWiAmIHNlYXJjaFBvaW50LGZsb2F0IGRtYXgpOwoAAAAAAAAAAKoEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBvY3RyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZF9sb29rdXAoY29uc3Qgc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+ICZYZGlzdCwgY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiByZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKHBjbDo6S2RUcmVlPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwa2R0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKAAAAAAAAAACsBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZCYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwoKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwoKVmVjdG9yWGYKY29tcHV0ZUxpa2VsaWhvb2QocGNsOjpvY3RyZWU6Ok9jdHJlZVBvaW50Q2xvdWRTZWFyY2g8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBvY3RyZWUsCiAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWiA+OjpDb25zdFB0ciBYbWVhc3BjbCxmbG9hdCBkbWF4LGZsb2F0IHNpZzApOwpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZF9sb29rdXAoY29uc3Qgc3RkOjp2ZWN0b3I8TWF0cml4WFh1aW50MTY+ICZYZGlzdCwgY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiByZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgoKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsY29uc3QgcGNsOjpQb2ludFhZWiAmIHNlYXJjaFBvaW50LGZsb2F0IGRtYXgpOwoAAAAAAAAAAOEEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZiYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwp2b2lkIEhtYXQycG9zZShjb25zdCBFaWdlbjo6TWF0cml4NGYmIEgsVmVjdG9yNmYmIHgpOwoKLy8gdm9pZCBzZXRNYXBYKCBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4gTWFwWCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7ClZlY3RvclhmCmNvbXB1dGVMaWtlbGlob29kX2xvb2t1cChjb25zdCBzdGQ6OnZlY3RvcjxNYXRyaXhYWHVpbnQxNj4gJlhkaXN0LCBjb25zdCBzdGQ6OnZlY3RvcjxmbG9hdD4mIHJlcywKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKCmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKHBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKCgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAAzwQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZiYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwp2b2lkIEhtYXQycG9zZShjb25zdCBFaWdlbjo6TWF0cml4NGYmIEgsVmVjdG9yNmYmIHgpOwoKLy8gdm9pZCBzZXRNYXBYKCBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4gTWFwWCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7ClZlY3RvclhmCmNvbXB1dGVMaWtlbGlob29kX2xvb2t1cChjb25zdCB4ZGlzdHR5cGUgJlhkaXN0LCBjb25zdCBzdGQ6OnZlY3RvcjxmbG9hdD4mIHJlcywKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKCmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKHBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKCgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAA7QQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADtBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZiYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwp2b2lkIEhtYXQycG9zZShjb25zdCBFaWdlbjo6TWF0cml4NGYmIEgsVmVjdG9yNmYmIHgpOwoKLy8gdm9pZCBzZXRNYXBYKCBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4gTWFwWCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7ClZlY3RvclhmCmNvbXB1dGVMaWtlbGlob29kX2xvb2t1cChjb25zdCB4ZGlzdHR5cGUgJlhkaXN0LCBjb25zdCBzdGQ6OnZlY3RvcjxmbG9hdD4mIHJlcyxzdGQ6OnZlY3RvcjxmbG9hdD4mIFhkaXN0X21pbiwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKCmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKHBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKCgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAA8wQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADzBAAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgp2b2lkIHBvc2UySG1hdChjb25zdCBWZWN0b3I2ZiYgeCxFaWdlbjo6TWF0cml4NGYmIEgpOwp2b2lkIEhtYXQycG9zZShjb25zdCBFaWdlbjo6TWF0cml4NGYmIEgsVmVjdG9yNmYmIHgpOwoKLy8gdm9pZCBzZXRNYXBYKCBwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj4gTWFwWCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7ClZlY3RvclhmCmNvbXB1dGVMaWtlbGlob29kX2xvb2t1cChjb25zdCB4ZGlzdHR5cGUgJlhkaXN0LCBjb25zdCBzdGQ6OnZlY3RvcjxmbG9hdD4mIHJlcyxjb25zdCBzdGQ6OnZlY3RvcjxmbG9hdD4mIFhkaXN0X21pbiwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFhmPiAmWHBvc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKCmZsb2F0IGdldE5Oc3FyZGRpc3QyTWFwKHBjbDo6b2N0cmVlOjpPY3RyZWVQb2ludENsb3VkU2VhcmNoPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwb2N0cmVlLGNvbnN0IHBjbDo6UG9pbnRYWVogJiBzZWFyY2hQb2ludCxmbG9hdCBkbWF4KTsKCgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6OktkVHJlZTxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcGtkdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgAAAAAAAAAACAUAAAAAAAAAAAAAAAAAAAAAAABOBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkBAAAAAAAAmQEAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"BgAAAAAAAAAAAAAAAAAAAAAAAABOBQAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgoKCgpFaWdlbjo6TWF0cml4NGYgcG9zZTJIbWF0KGNvbnN0IFZlY3RvcjZmJiB4KTsKVmVjdG9yNmYgSG1hdDJwb3NlKGNvbnN0IEVpZ2VuOjpNYXRyaXg0ZiYgSCk7CgpWZWN0b3I2ZiBIbWF0MnBvc2VfdjIoY29uc3QgRWlnZW46Ok1hdHJpeDRmJiBIKTsKCi8vIHZvaWQgc2V0TWFwWCggcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+IE1hcFgpOwoKRWlnZW46OlZlY3RvclhmCmNvbXB1dGVMaWtlbGlob29kKHBjbDo6S2RUcmVlPHBjbDo6UG9pbnRYWVo+OjpQdHIgbWFwa2R0cmVlLAogICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgcGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVogPjo6Q29uc3RQdHIgWG1lYXNwY2wsZmxvYXQgZG1heCxmbG9hdCBzaWcwKTsKCkVpZ2VuOjpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSwKICAgICAgICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WGY+ICZYcG9zZXMsCiAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CkVpZ2VuOjpWZWN0b3JYZgpjb21wdXRlTGlrZWxpaG9vZF9sb29rdXAoY29uc3QgeGRpc3R0eXBlICZYZGlzdCwgY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiByZXMsY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiBYZGlzdF9taW4sY29uc3Qgc3RkOjp2ZWN0b3I8ZmxvYXQ+JiBYZGlzdF9tYXgsCiAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlhwb3NlcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaID46OkNvbnN0UHRyIFhtZWFzcGNsLGZsb2F0IGRtYXgsZmxvYXQgc2lnMCk7CgpmbG9hdCBnZXROTnNxcmRkaXN0Mk1hcChwY2w6Om9jdHJlZTo6T2N0cmVlUG9pbnRDbG91ZFNlYXJjaDxwY2w6OlBvaW50WFlaPjo6UHRyIG1hcG9jdHJlZSxjb25zdCBwY2w6OlBvaW50WFlaICYgc2VhcmNoUG9pbnQsZmxvYXQgZG1heCk7CgoKZmxvYXQgZ2V0Tk5zcXJkZGlzdDJNYXAocGNsOjpLZFRyZWU8cGNsOjpQb2ludFhZWj46OlB0ciBtYXBrZHRyZWUsY29uc3QgcGNsOjpQb2ludFhZWiAmIHNlYXJjaFBvaW50LGZsb2F0IGRtYXgpOwoAAAAAAAAAAE8FAAAAAAAAAAAAAAAAAAAAAAAATwUAAAAAAAAAAAAAAAAAAAAAAABPBQAAAAAAAAAAAAAAAAAAAAAAAE8FAAAAAAAAAAAAAAAAAAAAAAAATwUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pyslam/src/localize.cpp",
			"settings":
			{
				"buffer_size": 9003,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUbAAAAAAAA1BsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "pyslam/include/pcl_helpers.h",
			"settings":
			{
				"buffer_size": 374,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAByAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgQyxFaWdlbjo6TWF0cml4WGYgJlgpOwoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDp2ZWN0b3I8ZmxvYXQ+IHJlcyk7CgAAAAAAAAAAcwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgQyxFaWdlbjo6TWF0cml4WGYgJlgpOwoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAIwBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6Q29uc3RQdHIgQyxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeFhmPiZYKTsKCnZvaWQgcGNsX2ZpbHRlcl9jbG91ZChwY2w6OlBvaW50Q2xvdWQ8cGNsOjpQb2ludFhZWj46OkNvbnN0UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKTsKAAAAAAAAAACCAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXhYZj4mWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAHYBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46OlJlZjxFaWdlbiA6OiBNYXRyaXhYZj4mWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAHcBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46OlJlZjxFaWdlbiA6OiBNYXRyaXhYZj4mIFgpOwoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKTsKAAAAAAAAAAB8AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB8AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsY29uc3QgRWlnZW46OlJlZjxFaWdlbiA6OiBNYXRyaXhYZj4mWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAHwBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB8AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXhYZj4mWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAHcBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46OlJlZjwgRWlnZW4gOjogTWF0cml4WGY+JlgpOwoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKTsKAAAAAAAAAAB2AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgQyxib29sIGFwcGVuZD1mYWxzZSk7CnZvaWQgcGNsMmVpZ2VuKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyIEMsRWlnZW46OlJlZjwgRWlnZW4gOjogTWF0cml4WGY+WCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAIIBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgJiBDLGJvb2wgYXBwZW5kPWZhbHNlKTsKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4gWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAHYBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgJiBDLGJvb2wgYXBwZW5kPWZhbHNlKTsKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbiA6OiBNYXRyaXhYZiYgWCk7Cgp2b2lkIHBjbF9maWx0ZXJfY2xvdWQocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgaW5wdXRjbGQscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgb3V0cHV0Y2xkLHN0ZDo6dmVjdG9yPGZsb2F0PiByZXMpOwoAAAAAAAAAAIMBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAACDAQAAI3ByYWdtYSBvbmNlCiNpbmNsdWRlICJiYXNlLmgiCgp2b2lkIGVpZ2VuMnBjbChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYZj4gJlgscGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgJiBDLGJvb2wgYXBwZW5kPWZhbHNlKTsKdm9pZCBwY2wyZWlnZW4ocGNsOjpQb2ludENsb3VkPHBjbDo6UG9pbnRYWVo+OjpQdHIgICYgQyxFaWdlbjo6UmVmPCBFaWdlbiA6OiBNYXRyaXhYZj4mIFgpOwoKdm9pZCBwY2xfZmlsdGVyX2Nsb3VkKHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIGlucHV0Y2xkLHBjbDo6UG9pbnRDbG91ZDxwY2w6OlBvaW50WFlaPjo6UHRyICAmIG91dHB1dGNsZCxzdGQ6OnZlY3RvcjxmbG9hdD4gcmVzKTsKAAAAAAAAAAB2AQAAAAAAAAAAAAAAAAAAAAAAAHYBAAAAAAAAAAAAAAAAAAAAAAAAdgEAAAAAAAAAAAAAAAAAAAAAAAB2AQAAAAAAAAAAAAAAAAAAAAAAAHYBAAAAAAAAAAAAAAAAAAAAAAAAdgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "pyslam/src/binmatch.cpp",
			"settings":
			{
				"buffer_size": 14967,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAPRQAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAPRQAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0OgAAI2luY2x1ZGUgImJpbm1hdGNoLmgiCgp2b2lkIHRha2Vqc29uKGNvbnN0IG5sb2htYW5uOjpqc29uJiBqc29uKXsKICAgICAgICBzdGQ6OmNvdXQgPDwgIkkgZ290IGpzb24gYXMgOiI8PHN0ZDo6ZW5kbDsKICAgICAgICBzdGQ6OmNvdXQgPDwganNvbiA8PCBzdGQ6OmVuZGw7CgoKfQpNYXRyaXhYWGkKVXBzYW1wbGVNYXgoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBIdXAsaW50IG4pewogICAgICAgIC8vIHByaW50bXNnKCJIdXAucm93cygpIixIdXAucm93cygpKTsKICAgICAgICAvLyBwcmludG1zZygiSHVwLmNvbHMoKSIsSHVwLmNvbHMoKSk7CiAgICAgICAgTWF0cml4WFhpIEg9TWF0cml4WFhpOjpaZXJvKEh1cC5yb3dzKCkvMixIdXAuY29scygpLzIpOwogICAgICAgIC8vIHByaW50bXNnKCJILnJvd3MoKSIsSC5yb3dzKCkpOwogICAgICAgIC8vIHByaW50bXNnKCJILmNvbHMoKSIsSC5jb2xzKCkpOwogICAgICAgIGZvcihpbnQgaj0wOyBqPEgucm93cygpOyArK2opIHsKICAgICAgICAgICAgICAgIGZvcihpbnQgaz0wOyBrPEguY29scygpOyArK2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IGxieD1zdGQ6Om1heCgyKmosMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGludCB1Yng9c3RkOjptaW4oMipqK24rMSxpbnQoSHVwLnJvd3MoKSkpOwogICAgICAgICAgICAgICAgICAgICAgICBpbnQgbGJ5PXN0ZDo6bWF4KDIqaywwKTsKICAgICAgICAgICAgICAgICAgICAgICAgaW50IHVieT1zdGQ6Om1pbigyKmsrbisxLGludChIdXAuY29scygpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50bXNnKCJsYngiLGxieCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50bXNnKCJ1YngiLHVieCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50bXNnKCJsYnkiLGxieSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50bXNnKCJ1YnkiLHVieSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEgoaixrKSA9IEh1cChFaWdlbjo6c2VxKGxieCx1YngpLEVpZ2VuOjpzZXEobGJ5LHVieSkpLm1heENvZWZmKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIEgoaixrKSA9IEh1cC5ibG9jayhsYngsbGJ5LHVieC1sYngsdWJ5LWxieSkubWF4Q29lZmYoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgICAgIHJldHVybiBIOwp9CgoKTWF0cml4WFhpCmNvbXB1dGVIaXRvZ3JhbTJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWCxNYXRyaXgyaXJvdyBuX2VkZ2VzLCBNYXRyaXgyZnJvdyB4eW1pbiwgTWF0cml4MmZyb3cgeHltYXgpewogICAgICAgIC8vIEx4eSBpcyB0aGUgbGVuZ3RoCgogICAgICAgIE1hdHJpeFhYaSBIID0gTWF0cml4WFhpOjpaZXJvKG5fZWRnZXMoMCktMSxuX2VkZ2VzKDEpLTEpOwoKICAgICAgICBNYXRyaXgyZnJvdyBkeHkoe3h5bWF4KDApLXh5bWluKDApLHh5bWF4KDEpLXh5bWluKDEpfSk7CiAgICAgICAgLy8gTWF0cml4MmZyb3cgeHltaW4oe3htaW4oMCkseG1pbigxKX0pOwogICAgICAgIC8vIE1hdHJpeDJmcm93IHh5bWF4KHt4bWF4KDApLHhtYXgoMSl9KTsKCiAgICAgICAgTWF0cml4MmZyb3cgbnh5KHtuX2VkZ2VzKDApLTEsbl9lZGdlcygxKS0xfSk7CiAgICAgICAgLy8gTWF0cml4WDJmIFgxID0gWDsKICAgICAgICBNYXRyaXhYMmYgWDEgPSBYLnJvd3dpc2UoKS14eW1pbjsKICAgICAgICBNYXRyaXhYMmYgWDIgPSAtKFgucm93d2lzZSgpLXh5bWF4KTsKCgogICAgICAgIE1hdHJpeFhiY29sIGluYm5kPSAoIChYMS5hcnJheSgpPj0wICkuYXJyYXkoKSAqIChYMi5hcnJheSgpPj0wICkuYXJyYXkoKSkucm93d2lzZSgpLmFsbCgpOwoKICAgICAgICBNYXRyaXhYMmkgZGQgPSggKCAoWDEuYXJyYXkoKS5yb3d3aXNlKCkpL2R4eS5hcnJheSgpICkuYXJyYXkoKS5yb3d3aXNlKCkqbnh5LmFycmF5KCkgKS5jYXN0PGludD4oKTsKICAgICAgICAvLyBkZCA9IGRkLmFycmF5KCkucm93d2lzZSgpKm54eS5hcnJheSgpOwoKICAgICAgICBmb3IoaW50IGk9MDsgaTwgWC5yb3dzKCk7ICsraSkgewogICAgICAgICAgICAgICAgaWYgKGluYm5kKGkpKQogICAgICAgICAgICAgICAgICAgICAgICBIKGRkKGksMCksZGQoaSwxKSkrPTE7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gSDsKfQoKCgppbnQKZ2V0UG9pbnRDb3N0KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXgyZnJvdz4mIGR4LAogICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WDJmPiYgWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgT2opewoKICAgICAgICBNYXRyaXhYMmkgUG49ICggKFgucm93d2lzZSgpK09qKS5hcnJheSgpLnJvd3dpc2UoKS9keC5hcnJheSgpICkuY2FzdDxpbnQ+KCk7CgogICAgICAgIE1hdHJpeDJpcm93IHh5bWluKHswLDB9KTsKICAgICAgICBNYXRyaXgyaXJvdyB4eW1heCh7SC5yb3dzKCksSC5jb2xzKCl9KTsKICAgICAgICBNYXRyaXhYYmNvbCBpbmJuZD0gKCAoKFBuLnJvd3dpc2UoKS14eW1pbikuYXJyYXkoKT49MCApLmFycmF5KCkgKiAoKFBuLnJvd3dpc2UoKS14eW1heCkuYXJyYXkoKTwwICkuYXJyYXkoKSApLnJvd3dpc2UoKS5hbGwoKTsKCiAgICAgICAgaW50IGM9MDsKICAgICAgICBmb3IgKGludCBrPTA7IGs8UG4ucm93cygpOyArK2spIHsKICAgICAgICAgICAgICAgIGlmKGluYm5kKGspPjApCiAgICAgICAgICAgICAgICAgICAgICAgIGMrPUgoUG4oaywwKSxQbihrLDEpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGM7Cn0KCgoKQkJveApTb2xCb3gyQkJveChjb25zdCBTb2xCb3gmIHNvbGJveCl7CiAgICAgICAgQkJveCBiYm94OwogICAgICAgIGJib3gueDEgPSBzb2xib3gubGIoMCk7CiAgICAgICAgYmJveC55MSA9IHNvbGJveC5sYigxKTsKCiAgICAgICAgYXV0byB1YiA9IHNvbGJveC5sYitzb2xib3guZHg7CiAgICAgICAgYmJveC54MiA9IHViKDApOwogICAgICAgIGJib3gueTIgPSB1YigxKTsKCiAgICAgICAgcmV0dXJuIGJib3g7Cn0KCnN0ZDo6dmVjdG9yPFNvbEJveD4KcXVhZFNwbGl0U29sQm94KGNvbnN0IFNvbEJveCYgc29sYm94KXsKICAgICAgICBzdGQ6OnZlY3RvcjxTb2xCb3g+IHY7CiAgICAgICAgU29sQm94IGIxLGIyLGIzLGI0OwogICAgICAgIGIxID0gc29sYm94OwogICAgICAgIGIyID0gc29sYm94OwogICAgICAgIGIzID0gc29sYm94OwogICAgICAgIGI0ID0gc29sYm94OwoKICAgICAgICBiMS5sYiA9IHNvbGJveC5sYjsKICAgICAgICBiMS5keD1zb2xib3guZHgvMjsKICAgICAgICBiMS5mbGc9ZmFsc2U7CiAgICAgICAgdi5wdXNoX2JhY2soYjEpOwoKICAgICAgICBiMi5sYiA9IHNvbGJveC5sYjsgLy8rKE1hdHJpeDJmcm93KHsxLDB9KS5hcnJheSgpKnNvbGJveC5keC5hcnJheSgpKS8yOwogICAgICAgIGIyLmxiKDApPWIyLmxiKDApK3NvbGJveC5keCgwKS8yOwogICAgICAgIGIyLmR4PXNvbGJveC5keC8yOwogICAgICAgIGIyLmZsZz1mYWxzZTsKICAgICAgICB2LnB1c2hfYmFjayhiMik7CgogICAgICAgIGIzLmxiID0gc29sYm94LmxiOyAvLysoTWF0cml4MmZyb3coezEsMH0pLmFycmF5KCkqc29sYm94LmR4LmFycmF5KCkpLzI7CiAgICAgICAgYjMubGIoMSk9YjMubGIoMSkrc29sYm94LmR4KDEpLzI7CiAgICAgICAgYjMuZHg9c29sYm94LmR4LzI7CiAgICAgICAgYjMuZmxnPWZhbHNlOwogICAgICAgIHYucHVzaF9iYWNrKGIzKTsKCiAgICAgICAgYjQubGIgPSBzb2xib3gubGIrc29sYm94LmR4LzI7CiAgICAgICAgYjQuZHg9c29sYm94LmR4LzI7CiAgICAgICAgYjQuZmxnPWZhbHNlOwogICAgICAgIHYucHVzaF9iYWNrKGI0KTsKCiAgICAgICAgcmV0dXJuIHY7Cn0KCmJvb2wKU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgQkJveCYgYmIxLGNvbnN0IFNvbEJveCYgc2IyKXsKCiAgICAgICAgYXV0byBiYjI9U29sQm94MkJCb3goc2IyKTsKCiAgICAgICAgYXV0byB4X2xlZnQgPSBzdGQ6Om1heChiYjEueDEsIGJiMi54MSk7CiAgICAgICAgYXV0byB5X2JvdHRvbSA9IHN0ZDo6bWF4KGJiMS55MSwgYmIyLnkxKTsKICAgICAgICBhdXRvIHhfcmlnaHQgPSBzdGQ6Om1pbihiYjEueDIsIGJiMi54Mik7CiAgICAgICAgYXV0byB5X3RvcCA9IHN0ZDo6bWluKGJiMS55MiwgYmIyLnkyKTsKCiAgICAgICAgaWYgKCAoeF9yaWdodCA8IHhfbGVmdCkgfHwgKHlfdG9wIDwgeV9ib3R0b20pKQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwp9Cgpib29sClNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IFNvbEJveCYgc2IxLGNvbnN0IFNvbEJveCYgc2IyKXsKICAgICAgICBhdXRvIGJiMT1Tb2xCb3gyQkJveChzYjEpOwogICAgICAgIHJldHVybiBTb2xCb3hlc0ludGVyc2VjdChiYjEsc2IyKTsKfQoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IFNvbEJveCYgc2IpCnsKICAgICAgICBvcyA8PCAibGIgPSAiIDw8IHNiLmxiIDw8ICAiLCBkeCA9ICIgPDwgc2IuZHggPDwgIiAsY29zdCA9ICIgPDwgc2IuY29zdCA8PCAiLCBsdmwgPSAiIDw8IHNiLmx2bCA8PCAiLCB0aCA9ICI8PCBzYi50aCA8PCBzdGQ6OmVuZGw7CiAgICAgICAgcmV0dXJuIG9zOwp9CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yPDwoc3RkOjpvc3RyZWFtJiBvcywgY29uc3QgQkJveCYgc2IpCnsKICAgICAgICBvcyA8PCAiKHgxLHkxKSA9ICgiIDw8IHNiLngxIDw8ICAiLCIgPDwgc2IueTEgPDwgIikgLCAoeDIseTIpID0gKCIgPDwgc2IueDEgPDwgICIsIiA8PCBzYi55MSA8PCIpIiA8PCBzdGQ6OmVuZGw7CiAgICAgICAgcmV0dXJuIG9zOwp9CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yIDw8IChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBzdGQ6OnZlY3RvcjxTb2xCb3g+JiB2KQp7CiAgICAgICAgb3MgPDwgIlsiOwogICAgICAgIGZvciAoYXV0byBzYiA6IHYpCiAgICAgICAgewogICAgICAgICAgICAgICAgb3MgPDwgc2IgPDwgc3RkOjplbmRsOwogICAgICAgIH0KICAgICAgICBvcyA8PCAiXSI7CiAgICAgICAgcmV0dXJuIG9zOwp9CgoKQmluTWF0Y2g6OkJpbk1hdGNoKHN0ZDo6c3RyaW5nIG9wdCl7CiAgICAgICAgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwp9CnZvaWQgQmluTWF0Y2g6OnNldE9wdGlvbnMoc3RkOjpzdHJpbmcgb3B0KXsKICAgICAgICBvcHRpb25zPWpzb246OnBhcnNlKG9wdCk7CiAgICAgICAgTG1heD1NYXRyaXgyZnJvdyhvcHRpb25zWyJCaW5NYXRjaCJdWyJMbWF4Il1bMF0sb3B0aW9uc1siQmluTWF0Y2giXVsiTG1heCJdWzFdKTsKICAgICAgICBkeE1hdGNoPU1hdHJpeDJmcm93KG9wdGlvbnNbIkJpbk1hdGNoIl1bImR4TWF0Y2giXVswXSxvcHRpb25zWyJCaW5NYXRjaCJdWyJkeE1hdGNoIl1bMV0pOwogICAgICAgIGR4QmFzZT1NYXRyaXgyZnJvdyhvcHRpb25zWyJCaW5NYXRjaCJdWyJkeEJhc2UiXVswXSxvcHRpb25zWyJCaW5NYXRjaCJdWyJkeEJhc2UiXVsxXSk7CiAgICAgICAgdGhtYXg9b3B0aW9uc1siQmluTWF0Y2giXVsidGhtYXgiXTsKICAgICAgICB0aGZpbmVyZXM9b3B0aW9uc1siQmluTWF0Y2giXVsidGhmaW5lcmVzIl07Cn0KCnZvaWQgQmluTWF0Y2g6OmNvbXB1dGVIbGV2ZWxzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHRhcmcpewoKICAgICAgICBNYXRyaXgyZnJvdyBtbj1NYXRyaXgyZnJvdzo6WmVybygpOwogICAgICAgIE1hdHJpeDJmcm93IG14PU1hdHJpeDJmcm93OjpaZXJvKCk7CiAgICAgICAgbW5fb3JpZz1NYXRyaXgyZnJvdzo6WmVybygpOwogICAgICAgIC8vIEVpZ2VuOjpNYXRyaXgzZiBIMjFjb21wPUVpZ2VuOjpNYXRyaXgzZjo6SWRlbnRpdHkoKTsKCgogICAgICAgIG1uX29yaWcoMCkgPSBYdGFyZy5jb2woMCkubWluQ29lZmYoKTsKICAgICAgICBtbl9vcmlnKDEpID0gWHRhcmcuY29sKDEpLm1pbkNvZWZmKCk7CiAgICAgICAgbW5fb3JpZz1tbl9vcmlnLWR4TWF0Y2g7CgoKICAgICAgICBNYXRyaXhYMmYgWHRhcmcxPVh0YXJnLnJvd3dpc2UoKS1tbl9vcmlnOwoKICAgICAgICBtbigwKSA9IFh0YXJnMS5jb2woMCkubWluQ29lZmYoKTsKICAgICAgICBtbigxKSA9IFh0YXJnMS5jb2woMSkubWluQ29lZmYoKTsKICAgICAgICBteCgwKSA9IFh0YXJnMS5jb2woMCkubWF4Q29lZmYoKTsKICAgICAgICBteCgxKSA9IFh0YXJnMS5jb2woMSkubWF4Q29lZmYoKTsKCgoKICAgICAgICAvLyBNYXRyaXgyZnJvdyBQID0gbXgtbW47CgogICAgICAgIGludCBteGx2bD0wOwogICAgICAgIC8vIE1hdHJpeDJmcm93IGR4MD1teCtkeE1hdGNoOwoKCiAgICAgICAgaW50IGY7CiAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGk9MDsgaTwxMDA7ICsraSkgewogICAgICAgICAgICAgICAgZj1zdGQ6OnBvdygyLGkpOwogICAgICAgICAgICAgICAgZHhsZXZlbHMuZW1wbGFjZV9iYWNrKE1hdHJpeDJmcm93ICh7IChteCgwKSsxKmR4TWF0Y2goMCkpL2YsIChteCgxKSsxKmR4TWF0Y2goMSkpL2Z9KSk7CgogICAgICAgICAgICAgICAgaWYgKCAoZHhsZXZlbHMuYmFjaygpLmFycmF5KCk8PWR4TWF0Y2guYXJyYXkoKSkuYXJyYXkoKS5hbnkoKSApCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgbXhsdmw9ZHhsZXZlbHMuc2l6ZSgpOwogICAgICAgIE1hdHJpeDJpcm93IG5fZWRnZXMgPSAoIChteCsxKmR4TWF0Y2gpLmFycmF5KCkvZHhsZXZlbHMuYmFjaygpLmFycmF5KCkrMSApLmNhc3Q8aW50PigpOwogICAgICAgIE1hdHJpeFhYaSBIMW1hdGNoPSBjb21wdXRlSGl0b2dyYW0yRChYdGFyZzEsbl9lZGdlcywgTWF0cml4MmZyb3coezAsMH0pLCBteCsxKmR4TWF0Y2gpOwoKICAgICAgICAvLyBwcmludG1zZygiY29tcHV0ZUhpdG9ncmFtMkQiLCJjb21wdXRlSGl0b2dyYW0yRCBpcyBkb25lIik7CiAgICAgICAgLy8gcHJpbnRtc2coIkgxbWF0Y2ggcm93d2lzZSBtYXgiLEgxbWF0Y2gucm93d2lzZSgpLm1heENvZWZmKCkgKTsKCiAgICAgICAgTWF0cml4WFhpIEgybWF0Y2ggPSBIMW1hdGNoLnVuYXJ5RXhwcigKICAgICAgICAgICAgICAgIFtdKGludCB4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCh4PjApID8gMSA6IDAgKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gcHJpbnRtc2coIkgybWF0Y2giLCJIMm1hdGNoIGlzIGRvbmUiKTsKCiAgICAgICAgSExldmVscy5wdXNoX2JhY2soSDJtYXRjaCk7CiAgICAgICAgaW50IG49MjsKCiAgICAgICAgLy8gcHJpbnRtc2coIm14bHZsID0gIixteGx2bCk7CgogICAgICAgIGZvcihpbnQgaT0xOyBpPG14bHZsOyArK2kpIHsKICAgICAgICAgICAgICAgIC8vIHByaW50bXNnKCJVcHNhbXBsZU1heCBpIixpKTsKICAgICAgICAgICAgICAgIGF1dG8gSHVwID0gSExldmVscy5iYWNrKCk7CiAgICAgICAgICAgICAgICBhdXRvIEg9VXBzYW1wbGVNYXgoSHVwLG4pOwogICAgICAgICAgICAgICAgSExldmVscy5wdXNoX2JhY2soSCk7CiAgICAgICAgfQoKICAgICAgICAvLyBwcmludG1zZygiSExldmVsc1swXSIsSExldmVsc1swXSk7CgogICAgICAgIG14TFZMPWludChITGV2ZWxzLnNpemUoKSktMTsKICAgICAgICBzdGQ6OnJldmVyc2UoSExldmVscy5iZWdpbigpLEhMZXZlbHMuZW5kKCkpOwoKCgp9CgpzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4KQmluTWF0Y2g6OmdldG1hdGNoKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHNyYyxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXgzZj4mIEgxMil7CiAgICAgICAgSDEybW4gPSBIMTI7CiAgICAgICAgLy8gSDEybW4uYmxvY2soMCwyLDIsMCk9SDEybW4uYmxvY2soMCwyLDIsMCktbW5fb3JpZy5tYXRyaXgoKS50cmFuc3Bvc2UoKTsKICAgICAgICBIMTJtbigwLDIpPUgxMm1uKDAsMiktbW5fb3JpZygwKTsKICAgICAgICBIMTJtbigxLDIpPUgxMm1uKDEsMiktbW5fb3JpZygxKTsKCiAgICAgICAgdDAoMCk9IEgxMm1uKDAsMik7CiAgICAgICAgdDAoMSk9IEgxMm1uKDEsMik7CiAgICAgICAgLy8gTWF0cml4MmZyb3cgTDA9dDAtTG1heDsKICAgICAgICAvLyBNYXRyaXgyZnJvdyBMMT10MCtMbWF4OwoKCgogICAgICAgIFNvbEJveCBzb2xib3hfaW5pdDsKICAgICAgICBzb2xib3hfaW5pdC5sYiA9IE1hdHJpeDJmcm93KHswLDB9KTsKICAgICAgICBzb2xib3hfaW5pdC5keCA9IGR4bGV2ZWxzWzBdOwogICAgICAgIHNvbGJveF9pbml0LmNvc3Q9MDsKICAgICAgICBzb2xib3hfaW5pdC5sdmw9MDsKICAgICAgICBzb2xib3hfaW5pdC50aD0wOwogICAgICAgIHNvbGJveF9pbml0LmZsZz1mYWxzZTsgLy8KCgogICAgICAgIC8vIGludCBsdmw9MDsKICAgICAgICAvLyBhdXRvIGR4PWR4bGV2ZWxzW2x2bF07CiAgICAgICAgLy8gYXV0byBIPUhMZXZlbHNbbHZsXTsKCiAgICAgICAgc3RkOjp2ZWN0b3I8U29sQm94PiBxdjsKICAgICAgICBmb3IoZmxvYXQgdGg9LXRobWF4OyB0aDx0aG1heDsgdGg9dGgrdGhmaW5lcmVzKSB7CgogICAgICAgICAgICAgICAgRWlnZW46Ok1hdHJpeDJmIFIgKHt7c3RkOjpjb3ModGgpLCAtc3RkOjpzaW4odGgpfSx7c3RkOjpzaW4odGgpLCBzdGQ6OmNvcyh0aCl9fSk7CiAgICAgICAgICAgICAgICBNYXRyaXhYMmYgWFgxID0gKFIqKFhzcmMudHJhbnNwb3NlKCkpKS50cmFuc3Bvc2UoKTsKICAgICAgICAgICAgICAgIE1hdHJpeFgyZiBYWD0oKEgxMm1uLmJsb2NrKDAsMCwyLDIpKSooWFgxLnRyYW5zcG9zZSgpKSkudHJhbnNwb3NlKCk7CiAgICAgICAgICAgICAgICBYdGhbdGhdPVhYOwoKICAgICAgICAgICAgICAgIFNvbEJveCBzYiA9IHNvbGJveF9pbml0OwogICAgICAgICAgICAgICAgc2IudGggPSB0aDsKICAgICAgICAgICAgICAgIHF2LnB1c2hfYmFjayhzYik7CiAgICAgICAgICAgICAgICAvLyBzdGQ6OmNvdXQgPDwic2IgPSAiIDw8IHNiPDxzdGQ6OmVuZGw7CiAgICAgICAgICAgICAgICAvLyBhdXRvIHFzdiA9IHF1YWRTcGxpdFNvbEJveChzYik7CiAgICAgICAgICAgICAgICAvLyBzdGQ6OmNvdXQgPDwgcXN2PDxzdGQ6OmVuZGw7CgogICAgICAgIH0KCgoKICAgICAgICBCQm94IGJiMTsKICAgICAgICBiYjEueDE9dDAoMCktTG1heCgwKTsKICAgICAgICBiYjEueTE9dDAoMSktTG1heCgxKTsKICAgICAgICBiYjEueDI9dDAoMCkrTG1heCgwKTsKICAgICAgICBiYjEueTI9dDAoMSkrTG1heCgxKTsKICAgICAgICBzdGQ6OmNvdXQgPDwgImJiMS54MSxiYjEueTEsYmIxLngyLGJiMS55MiA9ICIgPDwgYmIxLngxIDw8ICIgIiA8PCBiYjEueTEgPDwgIiAiIDw8IGJiMS54MiA8PCAiICIgPDwgYmIxLnkyIDw8IHN0ZDo6ZW5kbDsKCiAgICAgICAgYXV0byBjbXAgPSBbXShTb2xCb3ggbGVmdCwgU29sQm94IHJpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAobGVmdC5jb3N0KSA8IChyaWdodC5jb3N0KTsKICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgIC8vIG5vdyBicmVhayB0aGUgaW5pdGlhbCBib3ggZnVydGhlciBhY2NvcmRpbmcgdG8gZHhCYXNlCiAgICAgICAgaW50IGNudD0wOwogICAgICAgIGlmIChkeEJhc2UoMCk+MCkgewogICAgICAgICAgICAgICAgd2hpbGUoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBjbnQ9MDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGk9MDsgaTxxdi5zaXplKCk7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocXZbaV0uZHguYXJyYXkoKT5keEJhc2UuYXJyYXkoKSkuYXJyYXkoKS5hbnkoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0byBxc3YgPSBxdWFkU3BsaXRTb2xCb3gocXZbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGo9MDsgajxxc3Yuc2l6ZSgpOyArK2opIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoU29sQm94ZXNJbnRlcnNlY3QoYmIxLHFzdltqXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxc3Zbal0ubHZsID0gcXZbaV0ubHZsKzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXYucHVzaF9iYWNrKHFzdltqXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF2W2ldLmNvc3Q9LTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbnQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoY250PjApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnNvcnQocXYuYmVnaW4oKSwgcXYuZW5kKCksY21wKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdi5lcmFzZShxdi5iZWdpbigpKzAscXYuYmVnaW4oKStjbnQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgoKCiAgICAgICAgI3ByYWdtYSBvbXAgcGFyYWxsZWwgZm9yIG51bV90aHJlYWRzKDgpCiAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGk9MDsgaTxxdi5zaXplKCk7ICsraSkgewogICAgICAgICAgICAgICAgcXZbaV0uY29zdD1nZXRQb2ludENvc3QoSExldmVsc1txdltpXS5sdmxdLGR4bGV2ZWxzW3F2W2ldLmx2bF0sWHRoW3F2W2ldLnRoXSxxdltpXS5sYik7CiAgICAgICAgICAgICAgICBxdltpXS5mbGc9dHJ1ZTsKICAgICAgICB9CgogICAgICAgIHF2aW5pdD1xdjsKICAgICAgICBzdGQ6Om1ha2VfaGVhcChxdmluaXQuYmVnaW4oKSwgcXZpbml0LmVuZCgpLGNtcCk7CgogICAgICAgIHN0ZDo6cHJpb3JpdHlfcXVldWU8U29sQm94LCBzdGQ6OmRlcXVlPFNvbEJveD4sIGRlY2x0eXBlKGNtcCk+IHEoY21wKTsKICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaT0wOyBpPHF2LnNpemUoKTsgKytpKSB7CiAgICAgICAgICAgICAgICBxLnB1c2gocXZbaV0pOwogICAgICAgIH0KICAgICAgICBxdi5jbGVhcigpOwoKICAgICAgICBNYXRyaXhYMmYgWFgwPSgoSDEybW4uYmxvY2soMCwwLDIsMikpKihYc3JjLnRyYW5zcG9zZSgpKSkudHJhbnNwb3NlKCk7CiAgICAgICAgWFgwID0gWFgwLnJvd3dpc2UoKSt0MDsKICAgICAgICBpbnQgY29zdDAgPSBnZXRQb2ludENvc3QoSExldmVsc1tteExWTF0sZHhsZXZlbHNbbXhMVkxdLFhYMCxNYXRyaXgyZnJvdyh7MCwwfSkpOwoKICAgICAgICBzdGQ6OnZlY3RvcjxTb2xCb3g+IHF2TXhMdkw7CiAgICAgICAgcXZNeEx2TC5yZXNlcnZlKDIwMCk7CiAgICAgICAgcXYucmVzZXJ2ZSgxMDApOwogICAgICAgIHdoaWxlKDEpIHsKCiAgICAgICAgICAgICAgICBxdi5jbGVhcigpOwogICAgICAgICAgICAgICAgcXZNeEx2TC5jbGVhcigpOwogICAgICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IGk9MDsgaTwyMDA7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5lbXB0eSgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBTb2xCb3ggc2I9cS50b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2IubHZsPG14TFZMKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0byBxc3YgPSBxdWFkU3BsaXRTb2xCb3goc2IpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBqPTA7IGo8cXN2LnNpemUoKTsgKytqKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihTb2xCb3hlc0ludGVyc2VjdChiYjEscXN2W2pdKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxc3Zbal0ubHZsID0gc2IubHZsKzE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF2LnB1c2hfYmFjayhxc3Zbal0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF2TXhMdkwucHVzaF9iYWNrKHNiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBxLnBvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgI3ByYWdtYSBvbXAgcGFyYWxsZWwgZm9yIG51bV90aHJlYWRzKDYpCiAgICAgICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaT0wOyBpPHF2LnNpemUoKTsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHF2W2ldLmNvc3Q9Z2V0UG9pbnRDb3N0KEhMZXZlbHNbcXZbaV0ubHZsXSxkeGxldmVsc1txdltpXS5sdmxdLFh0aFtxdltpXS50aF0scXZbaV0ubGIpOwogICAgICAgICAgICAgICAgICAgICAgICBxdltpXS5mbGc9dHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpPTA7IGk8cXYuc2l6ZSgpOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcS5wdXNoKHF2W2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBpPTA7IGk8cXZNeEx2TC5zaXplKCk7ICsraSkgewogICAgICAgICAgICAgICAgICAgICAgICBxLnB1c2gocXZNeEx2TFtpXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgU29sQm94IHNiPXEudG9wKCk7CiAgICAgICAgICAgICAgICBpZihzYi5sdmw9PW14TFZMKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcS5wb3AoKTsKICAgICAgICAgICAgICAgIGF1dG8gcXN2ID0gcXVhZFNwbGl0U29sQm94KHNiKTsKICAgICAgICAgICAgICAgIGZvcihzdGQ6OnNpemVfdCBqPTA7IGo8cXN2LnNpemUoKTsgKytqKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKFNvbEJveGVzSW50ZXJzZWN0KGJiMSxxc3Zbal0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXN2W2pdLmx2bCA9IHNiLmx2bCsxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzdltqXS5jb3N0PWdldFBvaW50Q29zdChITGV2ZWxzW3FzdltqXS5sdmxdLGR4bGV2ZWxzW3FzdltqXS5sdmxdLFh0aFtxc3Zbal0udGhdLHFzdltqXS5sYik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5wdXNoKHFzdltqXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgICAgIGF1dG8gYmVzdGNzdCA9IHEudG9wKCkuY29zdDsKICAgICAgICBzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4gZmluYWxzb2xzOwogICAgICAgIGZpbmFsc29scy5yZXNlcnZlKDMwKTsKICAgICAgICB3aGlsZSgxKSB7CiAgICAgICAgICAgICAgICBpZihxLnRvcCgpLmNvc3Q9PWJlc3Rjc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgU29sQm94IHNiPXEudG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHEucG9wKCk7CgogICAgICAgICAgICAgICAgICAgICAgICBhdXRvIHQ9c2IubGItdDA7CgogICAgICAgICAgICAgICAgICAgICAgICBFaWdlbjo6TWF0cml4M2YgSGNvbXBSID0gRWlnZW46Ok1hdHJpeDNmOjpJZGVudGl0eSgpOwogICAgICAgICAgICAgICAgICAgICAgICBFaWdlbjo6TWF0cml4MmYgUiAoe3tzdGQ6OmNvcyhzYi50aCksIC1zdGQ6OnNpbihzYi50aCl9LHtzdGQ6OnNpbihzYi50aCksIHN0ZDo6Y29zKHNiLnRoKX19KTsKICAgICAgICAgICAgICAgICAgICAgICAgSGNvbXBSLmJsb2NrKDAsMCwyLDIpPVI7CgogICAgICAgICAgICAgICAgICAgICAgICBFaWdlbjo6TWF0cml4M2YgSHQ9IEVpZ2VuOjpNYXRyaXgzZjo6SWRlbnRpdHkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgSHQoMCwyKT10KDApOwogICAgICAgICAgICAgICAgICAgICAgICBIdCgxLDIpPXQoMSk7CgogICAgICAgICAgICAgICAgICAgICAgICBFaWdlbjo6TWF0cml4M2YgSDEyY29tcCA9IChIdCpIMTJtbikqSGNvbXBSOwogICAgICAgICAgICAgICAgICAgICAgICBIMTJjb21wKDAsMikrPW1uX29yaWcoMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIEgxMmNvbXAoMSwyKSs9bW5fb3JpZygxKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVpZ2VuOjpNYXRyaXgzZiBIMjFjb21wPUgxMmNvbXAuaW52ZXJzZSgpCgogICAgICAgICAgICAgICAgICAgICAgICBCaW5NYXRjaFNvbCBibXM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJtcy5IPUgxMmNvbXA7CiAgICAgICAgICAgICAgICAgICAgICAgIGJtcy5jb3N0MD1jb3N0MDsKICAgICAgICAgICAgICAgICAgICAgICAgYm1zLmNvc3Q9c2IuY29zdDsKICAgICAgICAgICAgICAgICAgICAgICAgYm1zLmx2bCA9IHNiLmx2bDsKICAgICAgICAgICAgICAgICAgICAgICAgYm1zLm14TFZMID0gbXhMVkw7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc29scy5wdXNoX2JhY2soYm1zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgoKICAgICAgICB9CgogICAgICAgIHJldHVybiBmaW5hbHNvbHM7Cn0KAAAAAAAAAACKOgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAPRQAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAPRQAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAPRQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "pyslam/include/base.h",
			"settings":
			{
				"buffer_size": 5620,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACGEQAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KCgovL0Jvb3N0CiNpbmNsdWRlIDxib29zdC9maWxlc3lzdGVtLmhwcD4KCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKdXNpbmcgeGRpc3R0eXBlID0gc3RkOjp1bm9yZGVyZWRfbWFwPHVpbnQxNl90LHN0ZDo6dW5vcmRlcmVkX21hcDx1aW50MTZfdCxzdGQ6OnVub3JkZXJlZF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAAaBEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoEQAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KCgovL0Jvb3N0CiNpbmNsdWRlIDxib29zdC9maWxlc3lzdGVtLmhwcD4KCgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAApxEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnEQAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAA/hEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD+EQAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAADRIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAAJRIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAAfhIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB+EgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAACBEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACBEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAACBEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACBEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAACEEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACEEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKLy8gdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAACEEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACEEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKLy8gdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAAClEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvYnRyZWUuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAAClEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvYnRyZWUuaD4KCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAADPEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvYnRyZWUuaD4KI2luY2x1ZGUgInBhcmFsbGVsX2hhc2htYXAvcGhtYXBfZHVtcC5oIgoKCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAADPEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvYnRyZWUuaD4KI2luY2x1ZGUgInBhcmFsbGVsX2hhc2htYXAvcGhtYXBfZHVtcC5oIgoKCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CgpuYW1lc3BhY2UgcHkgPSBweWJpbmQxMTsKCgp1c2luZyBNYXRyaXhYYmNvbCA9IEVpZ2VuOjpNYXRyaXg8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBNYXRyaXgyZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIDI+Owp1c2luZyBNYXRyaXgyaXJvdyA9IEVpZ2VuOjpNYXRyaXg8aW50LCAxLCAyPjsKdXNpbmcgTWF0cml4WGJyb3cgPSBFaWdlbjo6TWF0cml4PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYZnJvdyA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WFhpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFgyZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDNmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDM+Owp1c2luZyBNYXRyaXhYMmkgPSBFaWdlbjo6TWF0cml4PGludCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBNYXRyaXhYMmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcgTWF0cml4WFh1aW50MTYgPSBFaWdlbjo6TWF0cml4PHVpbnQxNl90LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+OwoKdXNpbmcgVmVjdG9yNmQgPSBFaWdlbjo6TWF0cml4PGRvdWJsZSwgNiwgMT47CnVzaW5nIFZlY3RvcjZmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNiwgMT47CnVzaW5nIFZlY3RvcjRmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgNCwgMT47CnVzaW5nIFZlY3RvclhmID0gRWlnZW46Ok1hdHJpeDxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDE+OwoKdXNpbmcgQXJyYXlYYmNvbCA9IEVpZ2VuOjpBcnJheTxib29sLCBFaWdlbjo6RHluYW1pYywgMT47CnVzaW5nIEFycmF5MmZyb3cgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIDEsIDI+Owp1c2luZyBBcnJheTJpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgMj47CnVzaW5nIEFycmF5WGJyb3cgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhpcm93ID0gRWlnZW46OkFycmF5PGludCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYWGYgPSBFaWdlbjo6QXJyYXk8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WDJmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIEFycmF5WDJpID0gRWlnZW46OkFycmF5PGludCwgRWlnZW46OkR5bmFtaWMsIDI+OwoKdXNpbmcganNvbiA9IG5sb2htYW5uOjpqc29uOwoKLy8gdXNpbmcgeGRpc3R0eXBlID0gc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3Qsc3RkOjptYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKdXNpbmcgeGRpc3R0eXBlID0gZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKLy8gdXNpbmcgeGRpc3R0eXBlID0gYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsZmxvYXQ+ID4gPjsKCgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAADiEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADiEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgojaW5jbHVkZSA8YXRvbWljPgoKCi8vZWlnZW5gCiNpbmNsdWRlIDxFaWdlbi9Db3JlPgojaW5jbHVkZSA8RWlnZW4vR2VvbWV0cnk+CgoKLy9wY2wKI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL2lvL3BjZF9pby5oPgojaW5jbHVkZSA8cGNsL3BvaW50X3R5cGVzLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL29yZ2FuaXplZC5oPgojaW5jbHVkZSA8cGNsL3NlYXJjaC9rZHRyZWUuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9ub3JtYWxfM2Rfb21wLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9jb25kaXRpb25hbF9yZW1vdmFsLmg+CiNpbmNsdWRlIDxwY2wvc2VnbWVudGF0aW9uL2V4dHJhY3RfY2x1c3RlcnMuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9kb24uaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2Nyb3BfYm94Lmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi90cmFuc2Zvcm1zLmg+Ci8vICNpbmNsdWRlIDxrZHRyZWUuaD4KLy8gI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9teWdpY3AuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vbmR0Lmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL2ljcC5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvYXBwcm94aW1hdGVfdm94ZWxfZ3JpZC5oPgojaW5jbHVkZSA8cGNsL3Zpc3VhbGl6YXRpb24vcGNsX3Zpc3VhbGl6ZXIuaD4KI2luY2x1ZGUgPHBjbC9wb2ludF9jbG91ZC5oPgojaW5jbHVkZSA8cGNsL29jdHJlZS9vY3RyZWVfc2VhcmNoLmg+CiNpbmNsdWRlIDxwY2wva2R0cmVlL2tkdHJlZV9mbGFubi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi9jb21tb25faGVhZGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZC5oPgojaW5jbHVkZSA8cGNsL2NvbnNvbGUvcGFyc2UuaD4KCgovL21pc2MKI2luY2x1ZGUgPG5sb2htYW5uL2pzb24uaHBwPgojaW5jbHVkZSA8b21wLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL3BobWFwLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL2J0cmVlLmg+CiNpbmNsdWRlICJwYXJhbGxlbF9oYXNobWFwL3BobWFwX2R1bXAuaCIKCgovL0Jvb3N0CiNpbmNsdWRlIDxib29zdC9maWxlc3lzdGVtLmhwcD4KCnVzaW5nIHBobWFwOjpmbGF0X2hhc2hfbWFwOwp1c2luZyBwaG1hcDo6YnRyZWVfbWFwOwoKbmFtZXNwYWNlIHB5ID0gcHliaW5kMTE7CgoKdXNpbmcgTWF0cml4WGJjb2wgPSBFaWdlbjo6TWF0cml4PGJvb2wsIEVpZ2VuOjpEeW5hbWljLCAxPjsKdXNpbmcgTWF0cml4MmZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCAyPjsKdXNpbmcgTWF0cml4Mmlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgMj47CnVzaW5nIE1hdHJpeFhicm93ID0gRWlnZW46Ok1hdHJpeDxib29sLCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhpcm93ID0gRWlnZW46Ok1hdHJpeDxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYaSA9IEVpZ2VuOjpNYXRyaXg8aW50LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYWGYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYMmYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIE1hdHJpeFgzZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAzPjsKdXNpbmcgTWF0cml4WDJpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDJkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIE1hdHJpeFhYdWludDE2ID0gRWlnZW46Ok1hdHJpeDx1aW50MTZfdCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKCnVzaW5nIFZlY3RvcjZkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIDYsIDE+Owp1c2luZyBWZWN0b3I2ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDYsIDE+Owp1c2luZyBWZWN0b3I0ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDQsIDE+Owp1c2luZyBWZWN0b3JYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAxPjsKCnVzaW5nIEFycmF5WGJjb2wgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBBcnJheTJmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCAyPjsKdXNpbmcgQXJyYXkyaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIDI+Owp1c2luZyBBcnJheVhicm93ID0gRWlnZW46OkFycmF5PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYZnJvdyA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhYaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVgyZiA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBBcnJheVgyaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIGpzb24gPSBubG9obWFubjo6anNvbjsKCi8vIHVzaW5nIHhkaXN0dHlwZSA9IHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CnVzaW5nIHhkaXN0dHlwZSA9IGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47Ci8vIHVzaW5nIHhkaXN0dHlwZSA9IGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsYnRyZWVfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CgoKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAA4hIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADiEgAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgojaW5jbHVkZSA8YXRvbWljPgoKCi8vZWlnZW5gCiNpbmNsdWRlIDxFaWdlbi9Db3JlPgojaW5jbHVkZSA8RWlnZW4vR2VvbWV0cnk+CgoKLy9wY2wKI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL2lvL3BjZF9pby5oPgojaW5jbHVkZSA8cGNsL3BvaW50X3R5cGVzLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL29yZ2FuaXplZC5oPgojaW5jbHVkZSA8cGNsL3NlYXJjaC9rZHRyZWUuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9ub3JtYWxfM2Rfb21wLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9jb25kaXRpb25hbF9yZW1vdmFsLmg+CiNpbmNsdWRlIDxwY2wvc2VnbWVudGF0aW9uL2V4dHJhY3RfY2x1c3RlcnMuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9kb24uaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2Nyb3BfYm94Lmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi90cmFuc2Zvcm1zLmg+Ci8vICNpbmNsdWRlIDxrZHRyZWUuaD4KLy8gI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9teWdpY3AuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vbmR0Lmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL2ljcC5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvYXBwcm94aW1hdGVfdm94ZWxfZ3JpZC5oPgojaW5jbHVkZSA8cGNsL3Zpc3VhbGl6YXRpb24vcGNsX3Zpc3VhbGl6ZXIuaD4KI2luY2x1ZGUgPHBjbC9wb2ludF9jbG91ZC5oPgojaW5jbHVkZSA8cGNsL29jdHJlZS9vY3RyZWVfc2VhcmNoLmg+CiNpbmNsdWRlIDxwY2wva2R0cmVlL2tkdHJlZV9mbGFubi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi9jb21tb25faGVhZGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZC5oPgojaW5jbHVkZSA8cGNsL2NvbnNvbGUvcGFyc2UuaD4KCgovL21pc2MKI2luY2x1ZGUgPG5sb2htYW5uL2pzb24uaHBwPgojaW5jbHVkZSA8b21wLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL3BobWFwLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL2J0cmVlLmg+CiNpbmNsdWRlICJwYXJhbGxlbF9oYXNobWFwL3BobWFwX2R1bXAuaCIKCgovL0Jvb3N0CiNpbmNsdWRlIDxib29zdC9maWxlc3lzdGVtLmhwcD4KCnVzaW5nIHBobWFwOjpmbGF0X2hhc2hfbWFwOwp1c2luZyBwaG1hcDo6YnRyZWVfbWFwOwoKbmFtZXNwYWNlIHB5ID0gcHliaW5kMTE7CgoKdXNpbmcgTWF0cml4WGJjb2wgPSBFaWdlbjo6TWF0cml4PGJvb2wsIEVpZ2VuOjpEeW5hbWljLCAxPjsKdXNpbmcgTWF0cml4MmZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCAyPjsKdXNpbmcgTWF0cml4Mmlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgMj47CnVzaW5nIE1hdHJpeFhicm93ID0gRWlnZW46Ok1hdHJpeDxib29sLCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhpcm93ID0gRWlnZW46Ok1hdHJpeDxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYaSA9IEVpZ2VuOjpNYXRyaXg8aW50LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYWGYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYMmYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIE1hdHJpeFgzZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAzPjsKdXNpbmcgTWF0cml4WDJpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDJkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIE1hdHJpeFhYdWludDE2ID0gRWlnZW46Ok1hdHJpeDx1aW50MTZfdCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKCnVzaW5nIFZlY3RvcjZkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIDYsIDE+Owp1c2luZyBWZWN0b3I2ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDYsIDE+Owp1c2luZyBWZWN0b3I0ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDQsIDE+Owp1c2luZyBWZWN0b3JYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAxPjsKCnVzaW5nIEFycmF5WGJjb2wgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBBcnJheTJmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCAyPjsKdXNpbmcgQXJyYXkyaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIDI+Owp1c2luZyBBcnJheVhicm93ID0gRWlnZW46OkFycmF5PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYZnJvdyA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhYaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVgyZiA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBBcnJheVgyaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIGpzb24gPSBubG9obWFubjo6anNvbjsKCi8vIHVzaW5nIHhkaXN0dHlwZSA9IHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LGZsb2F0PiA+ID47Ci8vIHVzaW5nIHhkaXN0dHlwZSA9IGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CnVzaW5nIHhkaXN0dHlwZSA9IGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsYnRyZWVfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CgoKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgAAAAAAAAAAmxMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACbEwAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgojaW5jbHVkZSA8YXRvbWljPgoKCi8vZWlnZW5gCiNpbmNsdWRlIDxFaWdlbi9Db3JlPgojaW5jbHVkZSA8RWlnZW4vR2VvbWV0cnk+CgoKLy9wY2wKI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL2lvL3BjZF9pby5oPgojaW5jbHVkZSA8cGNsL3BvaW50X3R5cGVzLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL29yZ2FuaXplZC5oPgojaW5jbHVkZSA8cGNsL3NlYXJjaC9rZHRyZWUuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9ub3JtYWxfM2Rfb21wLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9jb25kaXRpb25hbF9yZW1vdmFsLmg+CiNpbmNsdWRlIDxwY2wvc2VnbWVudGF0aW9uL2V4dHJhY3RfY2x1c3RlcnMuaD4KI2luY2x1ZGUgPHBjbC9mZWF0dXJlcy9kb24uaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2Nyb3BfYm94Lmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi90cmFuc2Zvcm1zLmg+Ci8vICNpbmNsdWRlIDxrZHRyZWUuaD4KLy8gI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vZ2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9teWdpY3AuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vbmR0Lmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL2ljcC5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvYXBwcm94aW1hdGVfdm94ZWxfZ3JpZC5oPgojaW5jbHVkZSA8cGNsL3Zpc3VhbGl6YXRpb24vcGNsX3Zpc3VhbGl6ZXIuaD4KI2luY2x1ZGUgPHBjbC9wb2ludF9jbG91ZC5oPgojaW5jbHVkZSA8cGNsL29jdHJlZS9vY3RyZWVfc2VhcmNoLmg+CiNpbmNsdWRlIDxwY2wva2R0cmVlL2tkdHJlZV9mbGFubi5oPgojaW5jbHVkZSA8cGNsL2NvbW1vbi9jb21tb25faGVhZGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZC5oPgojaW5jbHVkZSA8cGNsL2NvbnNvbGUvcGFyc2UuaD4KCgovL21pc2MKI2luY2x1ZGUgPG5sb2htYW5uL2pzb24uaHBwPgojaW5jbHVkZSA8b21wLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL3BobWFwLmg+CiNpbmNsdWRlIDxwYXJhbGxlbF9oYXNobWFwL2J0cmVlLmg+CiNpbmNsdWRlICJwYXJhbGxlbF9oYXNobWFwL3BobWFwX2R1bXAuaCIKCgovL0Jvb3N0CiNpbmNsdWRlIDxib29zdC9maWxlc3lzdGVtLmhwcD4KCnVzaW5nIHBobWFwOjpmbGF0X2hhc2hfbWFwOwp1c2luZyBwaG1hcDo6YnRyZWVfbWFwOwp1c2luZyBwaG1hcDo6cGFyYWxsZWxfZmxhdF9oYXNoX21hcAoKbmFtZXNwYWNlIHB5ID0gcHliaW5kMTE7CgoKdXNpbmcgTWF0cml4WGJjb2wgPSBFaWdlbjo6TWF0cml4PGJvb2wsIEVpZ2VuOjpEeW5hbWljLCAxPjsKdXNpbmcgTWF0cml4MmZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCAyPjsKdXNpbmcgTWF0cml4Mmlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgMj47CnVzaW5nIE1hdHJpeFhicm93ID0gRWlnZW46Ok1hdHJpeDxib29sLCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhpcm93ID0gRWlnZW46Ok1hdHJpeDxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYaSA9IEVpZ2VuOjpNYXRyaXg8aW50LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYWGYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYMmYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIE1hdHJpeFgzZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAzPjsKdXNpbmcgTWF0cml4WDJpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDJkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIE1hdHJpeFhYdWludDE2ID0gRWlnZW46Ok1hdHJpeDx1aW50MTZfdCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKCnVzaW5nIFZlY3RvcjZkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIDYsIDE+Owp1c2luZyBWZWN0b3I2ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDYsIDE+Owp1c2luZyBWZWN0b3I0ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDQsIDE+Owp1c2luZyBWZWN0b3JYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAxPjsKCnVzaW5nIEFycmF5WGJjb2wgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBBcnJheTJmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCAyPjsKdXNpbmcgQXJyYXkyaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIDI+Owp1c2luZyBBcnJheVhicm93ID0gRWlnZW46OkFycmF5PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYZnJvdyA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhYaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVgyZiA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBBcnJheVgyaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIGpzb24gPSBubG9obWFubjo6anNvbjsKCi8vIHVzaW5nIHhkaXN0dHlwZSA9IHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LHN0ZDo6bWFwPHVpbnQxNl90LGZsb2F0PiA+ID47Ci8vIHVzaW5nIHhkaXN0dHlwZSA9IGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47Ci8vIHVzaW5nIHhkaXN0dHlwZSA9IGJ0cmVlX21hcDx1aW50MTZfdCxidHJlZV9tYXA8dWludDE2X3QsYnRyZWVfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CnVzaW5nIHhkaXN0dHlwZSA9IHBobWFwOjpwYXJhbGxlbF9mbGF0X2hhc2hfbWFwPHVpbnQxNl90LHBobWFwOjpwYXJhbGxlbF9mbGF0X2hhc2hfbWFwPHVpbnQxNl90LHBobWFwOjpwYXJhbGxlbF9mbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsb2F0PiA+ID47CgoKZmxvYXQgZ2V0aXRlbVhkaXN0KGNvbnN0IHhkaXN0dHlwZSYgeCx1aW50MTZfdCBwLHVpbnQxNl90IHEsdWludDE2X3QgcixmbG9hdCBkbWF4KTsKCmpzb24KcGFyc2VPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdCk7Cgpqc29uCnJlYWRPcHRpb25zRmlsZShzdGQ6OnN0cmluZyBmaWxlKTsKCgp0ZW1wbGF0ZSA8Y2xhc3MgbXlUeXBlPgp2b2lkIHByaW50bXNnKHN0ZDo6c3RyaW5nIHZhciwgbXlUeXBlIGIpIHsKIHN0ZDo6Y291dDw8IHZhciA8PCIgPSAiIDw8IGIgPDwgc3RkOjplbmRsOwp9CgoKCgoKbmFtZXNwYWNlIEVpZ2Vuewp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgd3JpdGVfYmluYXJ5KGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBjb25zdCBNYXRyaXgmIG1hdHJpeCl7CiAgICBzdGQ6Om9mc3RyZWFtIG91dChmaWxlbmFtZSwgc3RkOjppb3M6Om91dCB8IHN0ZDo6aW9zOjpiaW5hcnkgfCBzdGQ6Omlvczo6dHJ1bmMpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPW1hdHJpeC5yb3dzKCksIGNvbHM9bWF0cml4LmNvbHMoKTsKICAgIG91dC53cml0ZSgoY2hhciopICgmcm93cyksIHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJmNvbHMpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgbWF0cml4LmRhdGEoKSwgcm93cypjb2xzKnNpemVvZih0eXBlbmFtZSBNYXRyaXg6OlNjYWxhcikgKTsKICAgIG91dC5jbG9zZSgpOwp9CnRlbXBsYXRlPGNsYXNzIE1hdHJpeD4Kdm9pZCByZWFkX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjppZnN0cmVhbSBpbihmaWxlbmFtZSwgc3RkOjppb3M6OmluIHwgc3RkOjppb3M6OmJpbmFyeSk7CiAgICB0eXBlbmFtZSBNYXRyaXg6OkluZGV4IHJvd3M9MCwgY29scz0wOwogICAgaW4ucmVhZCgoY2hhciopICgmcm93cyksc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIGluLnJlYWQoKGNoYXIqKSAoJmNvbHMpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBtYXRyaXgucmVzaXplKHJvd3MsIGNvbHMpOwogICAgaW4ucmVhZCggKGNoYXIgKikgbWF0cml4LmRhdGEoKSAsIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBpbi5jbG9zZSgpOwp9Cn0KAAAAAAAAAACcEwAAAAAAAAAAAAAAAAAAAAAAAH8VAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8IAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"BgAAAAAAAAAAAAAAAAAAAAAAAAB/FQAAI3ByYWdtYSBvbmNlCi8vYmFzaWMKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8ZnN0cmVhbT4KI2luY2x1ZGUgPGNocm9ubz4KI2luY2x1ZGUgPGN0aW1lPgoKCi8vcHliaW5kCiNpbmNsdWRlIDxweWJpbmQxMS9weWJpbmQxMS5oPgojaW5jbHVkZSA8cHliaW5kMTEvZWlnZW4uaD4KI2luY2x1ZGUgPHB5YmluZDExL3N0bC5oPgojaW5jbHVkZSA8cHliaW5kMTEvcHliaW5kMTEuaD4KI2luY2x1ZGUgPHB5YmluZDExL2VtYmVkLmg+ICAvLyBweTo6c2NvcGVkX2ludGVycHJldGVyCgoKCi8vc3RsCiNpbmNsdWRlIDx2ZWN0b3I+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxjbWF0aD4KI2luY2x1ZGUgPHJhbmRvbT4KI2luY2x1ZGUgPHV0aWxpdHk+CiNpbmNsdWRlIDx0aHJlYWQ+CiNpbmNsdWRlIDxtYXA+CiNpbmNsdWRlIDx1bm9yZGVyZWRfbWFwPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxhcnJheT4KI2luY2x1ZGUgPG51bWVyaWM+CiNpbmNsdWRlIDxjc3RkZGVmPgojaW5jbHVkZSA8YXRvbWljPgojaW5jbHVkZSA8bnVtZXJpYz4KI2luY2x1ZGUgPGZ1dHVyZT4KI2luY2x1ZGUgPG11dGV4PgojaW5jbHVkZSA8cXVldWU+CgoKLy9laWdlbmAKI2luY2x1ZGUgPEVpZ2VuL0NvcmU+CiNpbmNsdWRlIDxFaWdlbi9HZW9tZXRyeT4KCgovL3BjbAojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvaW8vcGNkX2lvLmg+CiNpbmNsdWRlIDxwY2wvcG9pbnRfdHlwZXMuaD4KI2luY2x1ZGUgPHBjbC9zZWFyY2gvb3JnYW5pemVkLmg+CiNpbmNsdWRlIDxwY2wvc2VhcmNoL2tkdHJlZS5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL25vcm1hbF8zZF9vbXAuaD4KI2luY2x1ZGUgPHBjbC9maWx0ZXJzL2NvbmRpdGlvbmFsX3JlbW92YWwuaD4KI2luY2x1ZGUgPHBjbC9zZWdtZW50YXRpb24vZXh0cmFjdF9jbHVzdGVycy5oPgojaW5jbHVkZSA8cGNsL2ZlYXR1cmVzL2Rvbi5oPgojaW5jbHVkZSA8cGNsL2ZpbHRlcnMvY3JvcF9ib3guaD4KI2luY2x1ZGUgPHBjbC9jb21tb24vY29tbW9uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL3RyYW5zZm9ybXMuaD4KLy8gI2luY2x1ZGUgPGtkdHJlZS5oPgovLyAjaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9naWNwLmg+CiNpbmNsdWRlIDxwY2wvcmVnaXN0cmF0aW9uL215Z2ljcC5oPgojaW5jbHVkZSA8cGNsL3JlZ2lzdHJhdGlvbi9uZHQuaD4KI2luY2x1ZGUgPHBjbC9yZWdpc3RyYXRpb24vaWNwLmg+CiNpbmNsdWRlIDxwY2wvZmlsdGVycy9hcHByb3hpbWF0ZV92b3hlbF9ncmlkLmg+CiNpbmNsdWRlIDxwY2wvdmlzdWFsaXphdGlvbi9wY2xfdmlzdWFsaXplci5oPgojaW5jbHVkZSA8cGNsL3BvaW50X2Nsb3VkLmg+CiNpbmNsdWRlIDxwY2wvb2N0cmVlL29jdHJlZV9zZWFyY2guaD4KI2luY2x1ZGUgPHBjbC9rZHRyZWUva2R0cmVlX2ZsYW5uLmg+CiNpbmNsdWRlIDxwY2wvY29tbW9uL2NvbW1vbl9oZWFkZXJzLmg+CiNpbmNsdWRlIDxwY2wvZmVhdHVyZXMvbm9ybWFsXzNkLmg+CiNpbmNsdWRlIDxwY2wvY29uc29sZS9wYXJzZS5oPgoKCi8vbWlzYwojaW5jbHVkZSA8bmxvaG1hbm4vanNvbi5ocHA+CiNpbmNsdWRlIDxvbXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvcGhtYXAuaD4KI2luY2x1ZGUgPHBhcmFsbGVsX2hhc2htYXAvYnRyZWUuaD4KI2luY2x1ZGUgInBhcmFsbGVsX2hhc2htYXAvcGhtYXBfZHVtcC5oIgoKCi8vQm9vc3QKI2luY2x1ZGUgPGJvb3N0L2ZpbGVzeXN0ZW0uaHBwPgoKdXNpbmcgcGhtYXA6OmZsYXRfaGFzaF9tYXA7CnVzaW5nIHBobWFwOjpidHJlZV9tYXA7CnVzaW5nIHBobWFwOjpwYXJhbGxlbF9mbGF0X2hhc2hfbWFwOwoKdXNpbmcgbmFtZXNwYWNlIHN0ZDo6Y2hyb25vX2xpdGVyYWxzOwoKbmFtZXNwYWNlIHB5ID0gcHliaW5kMTE7CgoKdXNpbmcgTWF0cml4WGJjb2wgPSBFaWdlbjo6TWF0cml4PGJvb2wsIEVpZ2VuOjpEeW5hbWljLCAxPjsKdXNpbmcgTWF0cml4MmZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCAyPjsKdXNpbmcgTWF0cml4Mmlyb3cgPSBFaWdlbjo6TWF0cml4PGludCwgMSwgMj47CnVzaW5nIE1hdHJpeFhicm93ID0gRWlnZW46Ok1hdHJpeDxib29sLCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhpcm93ID0gRWlnZW46Ok1hdHJpeDxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgTWF0cml4WGZyb3cgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCAxLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIE1hdHJpeFhYaSA9IEVpZ2VuOjpNYXRyaXg8aW50LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYWGYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBNYXRyaXhYMmYgPSBFaWdlbjo6TWF0cml4PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgMj47CnVzaW5nIE1hdHJpeFgzZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAzPjsKdXNpbmcgTWF0cml4WDJpID0gRWlnZW46Ok1hdHJpeDxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKdXNpbmcgTWF0cml4WDJkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIE1hdHJpeFhYdWludDE2ID0gRWlnZW46Ok1hdHJpeDx1aW50MTZfdCwgRWlnZW46OkR5bmFtaWMsIEVpZ2VuOjpEeW5hbWljPjsKCnVzaW5nIFZlY3RvcjZkID0gRWlnZW46Ok1hdHJpeDxkb3VibGUsIDYsIDE+Owp1c2luZyBWZWN0b3I2ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDYsIDE+Owp1c2luZyBWZWN0b3I0ZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDQsIDE+Owp1c2luZyBWZWN0b3IzZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIDMsIDE+Owp1c2luZyBWZWN0b3JYZiA9IEVpZ2VuOjpNYXRyaXg8ZmxvYXQsIEVpZ2VuOjpEeW5hbWljLCAxPjsKCnVzaW5nIEFycmF5WGJjb2wgPSBFaWdlbjo6QXJyYXk8Ym9vbCwgRWlnZW46OkR5bmFtaWMsIDE+Owp1c2luZyBBcnJheTJmcm93ID0gRWlnZW46OkFycmF5PGZsb2F0LCAxLCAyPjsKdXNpbmcgQXJyYXkyaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIDI+Owp1c2luZyBBcnJheVhicm93ID0gRWlnZW46OkFycmF5PGJvb2wsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYaXJvdyA9IEVpZ2VuOjpBcnJheTxpbnQsIDEsIEVpZ2VuOjpEeW5hbWljPjsKdXNpbmcgQXJyYXlYZnJvdyA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgMSwgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVhYaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCBFaWdlbjo6RHluYW1pYz47CnVzaW5nIEFycmF5WFhmID0gRWlnZW46OkFycmF5PGZsb2F0LCBFaWdlbjo6RHluYW1pYywgRWlnZW46OkR5bmFtaWM+Owp1c2luZyBBcnJheVgyZiA9IEVpZ2VuOjpBcnJheTxmbG9hdCwgRWlnZW46OkR5bmFtaWMsIDI+Owp1c2luZyBBcnJheVgyaSA9IEVpZ2VuOjpBcnJheTxpbnQsIEVpZ2VuOjpEeW5hbWljLCAyPjsKCnVzaW5nIGpzb24gPSBubG9obWFubjo6anNvbjsKCnVzaW5nIHRpbWVyZGljdCA9IHN0ZDo6bWFwPHN0ZDo6c3RyaW5nLHN0ZDo6dmVjdG9yPGZsb2F0Pj47CnVzaW5nIHRpbWVyZGljdHB0ciA9IHN0ZDo6c2hhcmVkX3B0cjx0aW1lcmRpY3Q+OwovLyB1c2luZyB4ZGlzdHR5cGUgPSBzdGQ6Om1hcDx1aW50MTZfdCxzdGQ6Om1hcDx1aW50MTZfdCxzdGQ6Om1hcDx1aW50MTZfdCxmbG9hdD4gPiA+OwovLyB1c2luZyB4ZGlzdHR5cGUgPSBmbGF0X2hhc2hfbWFwPHVpbnQxNl90LGZsYXRfaGFzaF9tYXA8dWludDE2X3QsZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbG9hdD4gPiA+OwovLyB1c2luZyB4ZGlzdHR5cGUgPSBidHJlZV9tYXA8dWludDE2X3QsYnRyZWVfbWFwPHVpbnQxNl90LGJ0cmVlX21hcDx1aW50MTZfdCxmbG9hdD4gPiA+Owp1c2luZyB4ZGlzdHR5cGUgPSBwaG1hcDo6cGFyYWxsZWxfZmxhdF9oYXNoX21hcDx1aW50MTZfdCxwaG1hcDo6cGFyYWxsZWxfZmxhdF9oYXNoX21hcDx1aW50MTZfdCxwaG1hcDo6cGFyYWxsZWxfZmxhdF9oYXNoX21hcDx1aW50MTZfdCxmbG9hdD4gPiA+OwoKCmZsb2F0IGdldGl0ZW1YZGlzdChjb25zdCB4ZGlzdHR5cGUmIHgsdWludDE2X3QgcCx1aW50MTZfdCBxLHVpbnQxNl90IHIsZmxvYXQgZG1heCk7Cgpqc29uCnBhcnNlT3B0aW9ucyhzdGQ6OnN0cmluZyBvcHQpOwoKanNvbgpyZWFkT3B0aW9uc0ZpbGUoc3RkOjpzdHJpbmcgZmlsZSk7CgoKdGVtcGxhdGUgPGNsYXNzIG15VHlwZT4Kdm9pZCBwcmludG1zZyhzdGQ6OnN0cmluZyB2YXIsIG15VHlwZSBiKSB7CiBzdGQ6OmNvdXQ8PCB2YXIgPDwiID0gIiA8PCBiIDw8IHN0ZDo6ZW5kbDsKfQoKCgoKCm5hbWVzcGFjZSBFaWdlbnsKdGVtcGxhdGU8Y2xhc3MgTWF0cml4Pgp2b2lkIHdyaXRlX2JpbmFyeShjb25zdCBjaGFyKiBmaWxlbmFtZSwgY29uc3QgTWF0cml4JiBtYXRyaXgpewogICAgc3RkOjpvZnN0cmVhbSBvdXQoZmlsZW5hbWUsIHN0ZDo6aW9zOjpvdXQgfCBzdGQ6Omlvczo6YmluYXJ5IHwgc3RkOjppb3M6OnRydW5jKTsKICAgIHR5cGVuYW1lIE1hdHJpeDo6SW5kZXggcm93cz1tYXRyaXgucm93cygpLCBjb2xzPW1hdHJpeC5jb2xzKCk7CiAgICBvdXQud3JpdGUoKGNoYXIqKSAoJnJvd3MpLCBzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgb3V0LndyaXRlKChjaGFyKikgKCZjb2xzKSwgc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6SW5kZXgpKTsKICAgIG91dC53cml0ZSgoY2hhciopIG1hdHJpeC5kYXRhKCksIHJvd3MqY29scypzaXplb2YodHlwZW5hbWUgTWF0cml4OjpTY2FsYXIpICk7CiAgICBvdXQuY2xvc2UoKTsKfQp0ZW1wbGF0ZTxjbGFzcyBNYXRyaXg+CnZvaWQgcmVhZF9iaW5hcnkoY29uc3QgY2hhciogZmlsZW5hbWUsIE1hdHJpeCYgbWF0cml4KXsKICAgIHN0ZDo6aWZzdHJlYW0gaW4oZmlsZW5hbWUsIHN0ZDo6aW9zOjppbiB8IHN0ZDo6aW9zOjpiaW5hcnkpOwogICAgdHlwZW5hbWUgTWF0cml4OjpJbmRleCByb3dzPTAsIGNvbHM9MDsKICAgIGluLnJlYWQoKGNoYXIqKSAoJnJvd3MpLHNpemVvZih0eXBlbmFtZSBNYXRyaXg6OkluZGV4KSk7CiAgICBpbi5yZWFkKChjaGFyKikgKCZjb2xzKSxzaXplb2YodHlwZW5hbWUgTWF0cml4OjpJbmRleCkpOwogICAgbWF0cml4LnJlc2l6ZShyb3dzLCBjb2xzKTsKICAgIGluLnJlYWQoIChjaGFyICopIG1hdHJpeC5kYXRhKCkgLCByb3dzKmNvbHMqc2l6ZW9mKHR5cGVuYW1lIE1hdHJpeDo6U2NhbGFyKSApOwogICAgaW4uY2xvc2UoKTsKfQp9CgoKCnN0cnVjdCBUaW1lcnsKVGltZXIoY29uc3Qgc3RkOjpzdHJpbmcgJmssdGltZXJkaWN0cHRyICZ0cHRyICk7Cn5UaW1lcigpOwoKc3RkOjpjaHJvbm86OnRpbWVfcG9pbnQ8c3RkOjpjaHJvbm86OmhpZ2hfcmVzb2x1dGlvbl9jbG9jaz4gdDEsdDI7CnRpbWVyZGljdHB0ciBUcHRyOwpzdGQ6OnN0cmluZyBrZXk7Cn07CgAAAAAAAAAA9BUAAAAAAAAAAAAAAAAAAAAAAAD0FQAAAAAAAAAAAAAAAAAAAAAAAPQVAAAAAAAAAAAAAAAAAAAAAAAA9BUAAAAAAAAAAAAAAAAAAAAAAAD0FQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pyslam/include/binmatch.h",
			"settings":
			{
				"buffer_size": 1939,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3BwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpNYXRyaXgzZiBnZXQzZkhtYXQoTWF0cml4NGYgSCxpbnQgZml4ZWRheGlzPTIpewoKfQoKTWF0cml4WFhpClVwc2FtcGxlTWF4KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSHVwLGludCBuKTsKCgpNYXRyaXhYWGkKY29tcHV0ZUhpdG9ncmFtMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYMmY+JiBYLE1hdHJpeDJpcm93IG5fZWRnZXMsIE1hdHJpeDJmcm93IHhtaW4sIE1hdHJpeDJmcm93IHhtYXgpOwoKCmludApnZXRQb2ludENvc3QoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBILCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgZHgsCiAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYMmY+JiBYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4MmZyb3c+JiBPaik7CgpzdHJ1Y3QgU29sQm94IHsKICAgICAgICBNYXRyaXgyZnJvdyBsYjsgLy8gYm90dG9tIGxlZnQgY29ybmVyCiAgICAgICAgTWF0cml4MmZyb3cgZHg7IC8vIHNpZGUgbGVuZ3RoCiAgICAgICAgaW50IGNvc3Q9MDsKICAgICAgICBpbnQgbHZsPTA7CiAgICAgICAgZmxvYXQgdGg9MDsKICAgICAgICBib29sIGZsZz1mYWxzZTsgLy8gdHJ1ZSBvbmx5IGlmIGNvc3Qgd2FzIGNvbXB1dGVkCn07CnN0cnVjdCBCQm94IHsKICAgICAgICBmbG9hdCB4MSx5MTsKICAgICAgICBmbG9hdCB4Mix5MjsKfTsKCnN0cnVjdCBCaW5NYXRjaFNvbCB7CiAgICAgICAgRWlnZW46Ok1hdHJpeDNmIEg7CiAgICAgICAgaW50IGNvc3QwOwogICAgICAgIGludCBjb3N0OwogICAgICAgIGludCBsdmw7CiAgICAgICAgaW50IG14TFZMOwp9OwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IFNvbEJveCYgc2IpOwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IEJCb3gmIHNiKTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3IgPDwgKHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IHN0ZDo6dmVjdG9yPFNvbEJveD4mIHYpOwoKQkJveCBTb2xCb3gyQkJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7CgpzdGQ6OnZlY3RvcjxTb2xCb3g+IHF1YWRTcGxpdFNvbEJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7Cgpib29sIFNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IFNvbEJveCYgc2IxLGNvbnN0IFNvbEJveCYgc2IyKTsKCmJvb2wgU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgQkJveCYgYmIxLGNvbnN0IFNvbEJveCYgc2IyKTsKCgpjbGFzcyBCaW5NYXRjaCB7CnB1YmxpYzoKQmluTWF0Y2goc3RkOjpzdHJpbmcgb3B0aW9uc18pOwp2b2lkIHNldE9wdGlvbnMoc3RkOjpzdHJpbmcgb3B0aW9uc18pOwp2b2lkIGNvbXB1dGVIbGV2ZWxzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHRhcmcpOwoKc3RkOjp2ZWN0b3I8QmluTWF0Y2hTb2w+CmdldG1hdGNoKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHNyYyxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDNmPiYgSDEyKTsKCk1hdHJpeDJmcm93IHQwOwpFaWdlbjo6TWF0cml4M2YgSDEybW47CnN0ZDo6dmVjdG9yPGludD4gbGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXhYWGk+IEhMZXZlbHM7CnN0ZDo6dmVjdG9yPE1hdHJpeDJmcm93PiBkeGxldmVsczsKTWF0cml4MmZyb3cgZHhNYXRjaDsKTWF0cml4MmZyb3cgZHhCYXNlOwpNYXRyaXgyZnJvdyBMbWF4OwpzdGQ6OnVub3JkZXJlZF9tYXA8ZmxvYXQsTWF0cml4WDJmPiBYdGg7CmZsb2F0IHRobWF4OwpmbG9hdCB0aGZpbmVyZXM7Cmpzb24gb3B0aW9uczsKTWF0cml4MmZyb3cgbW5fb3JpZzsKaW50IG14TFZMOwoKc3RkOjp2ZWN0b3I8U29sQm94PiBxdmluaXQ7Cn07CgAAAAAAAAAAxQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFBwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpNYXRyaXgzZiBnZXQzZkhtYXQoTWF0cml4NGYgSCxpbnQgZml4ZWRheGlzPTIpewoKfQoKTWF0cml4WFhpClVwc2FtcGxlTWF4KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSHVwLGludCBuKTsKCgpNYXRyaXhYWGkKY29tcHV0ZUhpdG9ncmFtMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYMmY+JiBYLE1hdHJpeDJpcm93IG5fZWRnZXMsIE1hdHJpeDJmcm93IHhtaW4sIE1hdHJpeDJmcm93IHhtYXgpOwoKCmludApnZXRQb2ludENvc3QoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBILCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgZHgsCiAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYMmY+JiBYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4MmZyb3c+JiBPaik7CgpzdHJ1Y3QgU29sQm94IHsKICAgICAgICBNYXRyaXgyZnJvdyBsYjsgLy8gYm90dG9tIGxlZnQgY29ybmVyCiAgICAgICAgTWF0cml4MmZyb3cgZHg7IC8vIHNpZGUgbGVuZ3RoCiAgICAgICAgaW50IGNvc3Q9MDsKICAgICAgICBpbnQgbHZsPTA7CiAgICAgICAgZmxvYXQgdGg9MDsKICAgICAgICBib29sIGZsZz1mYWxzZTsgLy8gdHJ1ZSBvbmx5IGlmIGNvc3Qgd2FzIGNvbXB1dGVkCn07CnN0cnVjdCBCQm94IHsKICAgICAgICBmbG9hdCB4MSx5MTsKICAgICAgICBmbG9hdCB4Mix5MjsKfTsKCnN0cnVjdCBCaW5NYXRjaFNvbCB7CiAgICAgICAgRWlnZW46Ok1hdHJpeDNmIEg7CiAgICAgICAgaW50IGNvc3QwOwogICAgICAgIGludCBjb3N0OwogICAgICAgIGludCBsdmw7CiAgICAgICAgaW50IG14TFZMOwp9OwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IFNvbEJveCYgc2IpOwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IEJCb3gmIHNiKTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3IgPDwgKHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IHN0ZDo6dmVjdG9yPFNvbEJveD4mIHYpOwoKQkJveCBTb2xCb3gyQkJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7CgpzdGQ6OnZlY3RvcjxTb2xCb3g+IHF1YWRTcGxpdFNvbEJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7Cgpib29sIFNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IFNvbEJveCYgc2IxLGNvbnN0IFNvbEJveCYgc2IyKTsKCmJvb2wgU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgQkJveCYgYmIxLGNvbnN0IFNvbEJveCYgc2IyKTsKCgpjbGFzcyBCaW5NYXRjaCB7CnB1YmxpYzoKQmluTWF0Y2goc3RkOjpzdHJpbmcgb3B0aW9uc18pOwp2b2lkIHNldE9wdGlvbnMoc3RkOjpzdHJpbmcgb3B0aW9uc18pOwp2b2lkIGNvbXB1dGVIbGV2ZWxzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHRhcmcpOwoKc3RkOjp2ZWN0b3I8QmluTWF0Y2hTb2w+CmdldG1hdGNoKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHNyYyxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDNmPiYgSDEyKTsKCk1hdHJpeDJmcm93IHQwOwpFaWdlbjo6TWF0cml4M2YgSDEybW47CnN0ZDo6dmVjdG9yPGludD4gbGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXhYWGk+IEhMZXZlbHM7CnN0ZDo6dmVjdG9yPE1hdHJpeDJmcm93PiBkeGxldmVsczsKTWF0cml4MmZyb3cgZHhNYXRjaDsKTWF0cml4MmZyb3cgZHhCYXNlOwpNYXRyaXgyZnJvdyBMbWF4OwpzdGQ6OnVub3JkZXJlZF9tYXA8ZmxvYXQsTWF0cml4WDJmPiBYdGg7CmZsb2F0IHRobWF4OwpmbG9hdCB0aGZpbmVyZXM7Cmpzb24gb3B0aW9uczsKTWF0cml4MmZyb3cgbW5fb3JpZzsKaW50IG14TFZMOwoKc3RkOjp2ZWN0b3I8U29sQm94PiBxdmluaXQ7Cmpzb24gb3B0aW9uczsKfTsKAAAAAAAAAADMBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMBwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpNYXRyaXgzZiBnZXQzZkhtYXQoRWlnZW46Ok1hdHJpeDRmIEgsaW50IGZpeGVkYXhpcz0yKXsKCn0KCk1hdHJpeFhYaQpVcHNhbXBsZU1heChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFhYaT4mIEh1cCxpbnQgbik7CgoKTWF0cml4WFhpCmNvbXB1dGVIaXRvZ3JhbTJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWCxNYXRyaXgyaXJvdyBuX2VkZ2VzLCBNYXRyaXgyZnJvdyB4bWluLCBNYXRyaXgyZnJvdyB4bWF4KTsKCgppbnQKZ2V0UG9pbnRDb3N0KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXgyZnJvdz4mIGR4LAogICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WDJmPiYgWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgT2opOwoKc3RydWN0IFNvbEJveCB7CiAgICAgICAgTWF0cml4MmZyb3cgbGI7IC8vIGJvdHRvbSBsZWZ0IGNvcm5lcgogICAgICAgIE1hdHJpeDJmcm93IGR4OyAvLyBzaWRlIGxlbmd0aAogICAgICAgIGludCBjb3N0PTA7CiAgICAgICAgaW50IGx2bD0wOwogICAgICAgIGZsb2F0IHRoPTA7CiAgICAgICAgYm9vbCBmbGc9ZmFsc2U7IC8vIHRydWUgb25seSBpZiBjb3N0IHdhcyBjb21wdXRlZAp9OwpzdHJ1Y3QgQkJveCB7CiAgICAgICAgZmxvYXQgeDEseTE7CiAgICAgICAgZmxvYXQgeDIseTI7Cn07CgpzdHJ1Y3QgQmluTWF0Y2hTb2wgewogICAgICAgIEVpZ2VuOjpNYXRyaXgzZiBIOwogICAgICAgIGludCBjb3N0MDsKICAgICAgICBpbnQgY29zdDsKICAgICAgICBpbnQgbHZsOwogICAgICAgIGludCBteExWTDsKfTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3I8PChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBTb2xCb3gmIHNiKTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3I8PChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBCQm94JiBzYik7CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yIDw8IChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBzdGQ6OnZlY3RvcjxTb2xCb3g+JiB2KTsKCkJCb3ggU29sQm94MkJCb3goY29uc3QgU29sQm94JiBzb2xib3gpOwoKc3RkOjp2ZWN0b3I8U29sQm94PiBxdWFkU3BsaXRTb2xCb3goY29uc3QgU29sQm94JiBzb2xib3gpOwoKYm9vbCBTb2xCb3hlc0ludGVyc2VjdChjb25zdCBTb2xCb3gmIHNiMSxjb25zdCBTb2xCb3gmIHNiMik7Cgpib29sIFNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IEJCb3gmIGJiMSxjb25zdCBTb2xCb3gmIHNiMik7CgoKY2xhc3MgQmluTWF0Y2ggewpwdWJsaWM6CkJpbk1hdGNoKHN0ZDo6c3RyaW5nIG9wdGlvbnNfKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdGlvbnNfKTsKdm9pZCBjb21wdXRlSGxldmVscyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFh0YXJnKTsKCnN0ZDo6dmVjdG9yPEJpbk1hdGNoU29sPgpnZXRtYXRjaChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFhzcmMsY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXgzZj4mIEgxMik7CgpNYXRyaXgyZnJvdyB0MDsKRWlnZW46Ok1hdHJpeDNmIEgxMm1uOwpzdGQ6OnZlY3RvcjxpbnQ+IGxldmVsczsKc3RkOjp2ZWN0b3I8TWF0cml4WFhpPiBITGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXgyZnJvdz4gZHhsZXZlbHM7Ck1hdHJpeDJmcm93IGR4TWF0Y2g7Ck1hdHJpeDJmcm93IGR4QmFzZTsKTWF0cml4MmZyb3cgTG1heDsKc3RkOjp1bm9yZGVyZWRfbWFwPGZsb2F0LE1hdHJpeFgyZj4gWHRoOwpmbG9hdCB0aG1heDsKZmxvYXQgdGhmaW5lcmVzOwpqc29uIG9wdGlvbnM7Ck1hdHJpeDJmcm93IG1uX29yaWc7CmludCBteExWTDsKCnN0ZDo6dmVjdG9yPFNvbEJveD4gcXZpbml0Owpqc29uIG9wdGlvbnM7Cn07CgAAAAAAAAAAvwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpNYXRyaXgzZiBnZXQzZkhtYXQoRWlnZW46Ok1hdHJpeDRmIEgsaW50IGZpeGVkYXhpcz0yKXsKCn0KCk1hdHJpeFhYaQpVcHNhbXBsZU1heChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFhYaT4mIEh1cCxpbnQgbik7CgoKTWF0cml4WFhpCmNvbXB1dGVIaXRvZ3JhbTJEKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWCxNYXRyaXgyaXJvdyBuX2VkZ2VzLCBNYXRyaXgyZnJvdyB4bWluLCBNYXRyaXgyZnJvdyB4bWF4KTsKCgppbnQKZ2V0UG9pbnRDb3N0KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSCwgY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXgyZnJvdz4mIGR4LAogICAgICAgICAgICAgY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbjo6TWF0cml4WDJmPiYgWCxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgT2opOwoKc3RydWN0IFNvbEJveCB7CiAgICAgICAgTWF0cml4MmZyb3cgbGI7IC8vIGJvdHRvbSBsZWZ0IGNvcm5lcgogICAgICAgIE1hdHJpeDJmcm93IGR4OyAvLyBzaWRlIGxlbmd0aAogICAgICAgIGludCBjb3N0PTA7CiAgICAgICAgaW50IGx2bD0wOwogICAgICAgIGZsb2F0IHRoPTA7CiAgICAgICAgYm9vbCBmbGc9ZmFsc2U7IC8vIHRydWUgb25seSBpZiBjb3N0IHdhcyBjb21wdXRlZAp9OwpzdHJ1Y3QgQkJveCB7CiAgICAgICAgZmxvYXQgeDEseTE7CiAgICAgICAgZmxvYXQgeDIseTI7Cn07CgpzdHJ1Y3QgQmluTWF0Y2hTb2wgewogICAgICAgIEVpZ2VuOjpNYXRyaXgzZiBIOwogICAgICAgIGludCBjb3N0MDsKICAgICAgICBpbnQgY29zdDsKICAgICAgICBpbnQgbHZsOwogICAgICAgIGludCBteExWTDsKfTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3I8PChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBTb2xCb3gmIHNiKTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3I8PChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBCQm94JiBzYik7CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yIDw8IChzdGQ6Om9zdHJlYW0mIG9zLCBjb25zdCBzdGQ6OnZlY3RvcjxTb2xCb3g+JiB2KTsKCkJCb3ggU29sQm94MkJCb3goY29uc3QgU29sQm94JiBzb2xib3gpOwoKc3RkOjp2ZWN0b3I8U29sQm94PiBxdWFkU3BsaXRTb2xCb3goY29uc3QgU29sQm94JiBzb2xib3gpOwoKYm9vbCBTb2xCb3hlc0ludGVyc2VjdChjb25zdCBTb2xCb3gmIHNiMSxjb25zdCBTb2xCb3gmIHNiMik7Cgpib29sIFNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IEJCb3gmIGJiMSxjb25zdCBTb2xCb3gmIHNiMik7CgoKY2xhc3MgQmluTWF0Y2ggewpwdWJsaWM6CkJpbk1hdGNoKHN0ZDo6c3RyaW5nIG9wdGlvbnNfKTsKdm9pZCBzZXRPcHRpb25zKHN0ZDo6c3RyaW5nIG9wdGlvbnNfKTsKdm9pZCBjb21wdXRlSGxldmVscyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFh0YXJnKTsKCnN0ZDo6dmVjdG9yPEJpbk1hdGNoU29sPgpnZXRtYXRjaChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFhzcmMsY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXgzZj4mIEgxMik7CgpNYXRyaXgyZnJvdyB0MDsKRWlnZW46Ok1hdHJpeDNmIEgxMm1uOwpzdGQ6OnZlY3RvcjxpbnQ+IGxldmVsczsKc3RkOjp2ZWN0b3I8TWF0cml4WFhpPiBITGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXgyZnJvdz4gZHhsZXZlbHM7Ck1hdHJpeDJmcm93IGR4TWF0Y2g7Ck1hdHJpeDJmcm93IGR4QmFzZTsKTWF0cml4MmZyb3cgTG1heDsKc3RkOjp1bm9yZGVyZWRfbWFwPGZsb2F0LE1hdHJpeFgyZj4gWHRoOwpmbG9hdCB0aG1heDsKZmxvYXQgdGhmaW5lcmVzOwpqc29uIG9wdGlvbnM7Ck1hdHJpeDJmcm93IG1uX29yaWc7CmludCBteExWTDsKCnN0ZDo6dmVjdG9yPFNvbEJveD4gcXZpbml0OwoKfTsKAAAAAAAAAADGBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADGBwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpFaWdlbjo6TWF0cml4M2YgZ2V0M2ZIbWF0KEVpZ2VuOjpNYXRyaXg0ZiBILGludCBmaXhlZGF4aXM9Mil7Cgp9CgpNYXRyaXhYWGkKVXBzYW1wbGVNYXgoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBIdXAsaW50IG4pOwoKCk1hdHJpeFhYaQpjb21wdXRlSGl0b2dyYW0yRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFgsTWF0cml4Mmlyb3cgbl9lZGdlcywgTWF0cml4MmZyb3cgeG1pbiwgTWF0cml4MmZyb3cgeG1heCk7CgoKaW50CmdldFBvaW50Q29zdChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFhYaT4mIEgsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4MmZyb3c+JiBkeCwKICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFgyZj4mIFgsY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXgyZnJvdz4mIE9qKTsKCnN0cnVjdCBTb2xCb3ggewogICAgICAgIE1hdHJpeDJmcm93IGxiOyAvLyBib3R0b20gbGVmdCBjb3JuZXIKICAgICAgICBNYXRyaXgyZnJvdyBkeDsgLy8gc2lkZSBsZW5ndGgKICAgICAgICBpbnQgY29zdD0wOwogICAgICAgIGludCBsdmw9MDsKICAgICAgICBmbG9hdCB0aD0wOwogICAgICAgIGJvb2wgZmxnPWZhbHNlOyAvLyB0cnVlIG9ubHkgaWYgY29zdCB3YXMgY29tcHV0ZWQKfTsKc3RydWN0IEJCb3ggewogICAgICAgIGZsb2F0IHgxLHkxOwogICAgICAgIGZsb2F0IHgyLHkyOwp9OwoKc3RydWN0IEJpbk1hdGNoU29sIHsKICAgICAgICBFaWdlbjo6TWF0cml4M2YgSDsKICAgICAgICBpbnQgY29zdDA7CiAgICAgICAgaW50IGNvc3Q7CiAgICAgICAgaW50IGx2bDsKICAgICAgICBpbnQgbXhMVkw7Cn07CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yPDwoc3RkOjpvc3RyZWFtJiBvcywgY29uc3QgU29sQm94JiBzYik7CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yPDwoc3RkOjpvc3RyZWFtJiBvcywgY29uc3QgQkJveCYgc2IpOwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvciA8PCAoc3RkOjpvc3RyZWFtJiBvcywgY29uc3Qgc3RkOjp2ZWN0b3I8U29sQm94PiYgdik7CgpCQm94IFNvbEJveDJCQm94KGNvbnN0IFNvbEJveCYgc29sYm94KTsKCnN0ZDo6dmVjdG9yPFNvbEJveD4gcXVhZFNwbGl0U29sQm94KGNvbnN0IFNvbEJveCYgc29sYm94KTsKCmJvb2wgU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgU29sQm94JiBzYjEsY29uc3QgU29sQm94JiBzYjIpOwoKYm9vbCBTb2xCb3hlc0ludGVyc2VjdChjb25zdCBCQm94JiBiYjEsY29uc3QgU29sQm94JiBzYjIpOwoKCmNsYXNzIEJpbk1hdGNoIHsKcHVibGljOgpCaW5NYXRjaChzdGQ6OnN0cmluZyBvcHRpb25zXyk7CnZvaWQgc2V0T3B0aW9ucyhzdGQ6OnN0cmluZyBvcHRpb25zXyk7CnZvaWQgY29tcHV0ZUhsZXZlbHMoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYMmY+JiBYdGFyZyk7CgpzdGQ6OnZlY3RvcjxCaW5NYXRjaFNvbD4KZ2V0bWF0Y2goY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYMmY+JiBYc3JjLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW4gOjogTWF0cml4M2Y+JiBIMTIpOwoKTWF0cml4MmZyb3cgdDA7CkVpZ2VuOjpNYXRyaXgzZiBIMTJtbjsKc3RkOjp2ZWN0b3I8aW50PiBsZXZlbHM7CnN0ZDo6dmVjdG9yPE1hdHJpeFhYaT4gSExldmVsczsKc3RkOjp2ZWN0b3I8TWF0cml4MmZyb3c+IGR4bGV2ZWxzOwpNYXRyaXgyZnJvdyBkeE1hdGNoOwpNYXRyaXgyZnJvdyBkeEJhc2U7Ck1hdHJpeDJmcm93IExtYXg7CnN0ZDo6dW5vcmRlcmVkX21hcDxmbG9hdCxNYXRyaXhYMmY+IFh0aDsKZmxvYXQgdGhtYXg7CmZsb2F0IHRoZmluZXJlczsKanNvbiBvcHRpb25zOwpNYXRyaXgyZnJvdyBtbl9vcmlnOwppbnQgbXhMVkw7CgpzdGQ6OnZlY3RvcjxTb2xCb3g+IHF2aW5pdDsKCn07CgAAAAAAAAAAzQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNBwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgpFaWdlbjo6TWF0cml4M2YgZ2V0M2ZIbWF0KEVpZ2VuOjpNYXRyaXg0ZiBILGludCBmaXhlZGF4aXM9Mil7Cgp9CgpNYXRyaXhYWGkKVXBzYW1wbGVNYXgoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBIdXAsaW50IG4pOwoKCk1hdHJpeFhYaQpjb21wdXRlSGl0b2dyYW0yRChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFgsTWF0cml4Mmlyb3cgbl9lZGdlcywgTWF0cml4MmZyb3cgeG1pbiwgTWF0cml4MmZyb3cgeG1heCk7CgoKaW50CmdldFBvaW50Q29zdChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFhYaT4mIEgsIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4MmZyb3c+JiBkeCwKICAgICAgICAgICAgIGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgRWlnZW46Ok1hdHJpeFgyZj4mIFgsY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXgyZnJvdz4mIE9qKTsKCnN0cnVjdCBTb2xCb3ggewogICAgICAgIE1hdHJpeDJmcm93IGxiOyAvLyBib3R0b20gbGVmdCBjb3JuZXIKICAgICAgICBNYXRyaXgyZnJvdyBkeDsgLy8gc2lkZSBsZW5ndGgKICAgICAgICBpbnQgY29zdD0wOwogICAgICAgIGludCBsdmw9MDsKICAgICAgICBmbG9hdCB0aD0wOwogICAgICAgIGJvb2wgZmxnPWZhbHNlOyAvLyB0cnVlIG9ubHkgaWYgY29zdCB3YXMgY29tcHV0ZWQKfTsKc3RydWN0IEJCb3ggewogICAgICAgIGZsb2F0IHgxLHkxOwogICAgICAgIGZsb2F0IHgyLHkyOwp9OwoKc3RydWN0IEJpbk1hdGNoU29sIHsKICAgICAgICBFaWdlbjo6TWF0cml4M2YgSDsKICAgICAgICBpbnQgY29zdDA7CiAgICAgICAgaW50IGNvc3Q7CiAgICAgICAgaW50IGx2bDsKICAgICAgICBpbnQgbXhMVkw7Cn07CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yPDwoc3RkOjpvc3RyZWFtJiBvcywgY29uc3QgU29sQm94JiBzYik7CgpzdGQ6Om9zdHJlYW0mIG9wZXJhdG9yPDwoc3RkOjpvc3RyZWFtJiBvcywgY29uc3QgQkJveCYgc2IpOwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvciA8PCAoc3RkOjpvc3RyZWFtJiBvcywgY29uc3Qgc3RkOjp2ZWN0b3I8U29sQm94PiYgdik7CgpCQm94IFNvbEJveDJCQm94KGNvbnN0IFNvbEJveCYgc29sYm94KTsKCnN0ZDo6dmVjdG9yPFNvbEJveD4gcXVhZFNwbGl0U29sQm94KGNvbnN0IFNvbEJveCYgc29sYm94KTsKCmJvb2wgU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgU29sQm94JiBzYjEsY29uc3QgU29sQm94JiBzYjIpOwoKYm9vbCBTb2xCb3hlc0ludGVyc2VjdChjb25zdCBCQm94JiBiYjEsY29uc3QgU29sQm94JiBzYjIpOwoKCmNsYXNzIEJpbk1hdGNoIHsKcHVibGljOgpCaW5NYXRjaChzdGQ6OnN0cmluZyBvcHRpb25zXyk7CnZvaWQgc2V0T3B0aW9ucyhjb25zdCBzdGQ6OnN0cmluZyAmb3B0aW9uc18pOwp2b2lkIGNvbXB1dGVIbGV2ZWxzKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHRhcmcpOwoKc3RkOjp2ZWN0b3I8QmluTWF0Y2hTb2w+CmdldG1hdGNoKGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WDJmPiYgWHNyYyxjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuIDo6IE1hdHJpeDNmPiYgSDEyKTsKCk1hdHJpeDJmcm93IHQwOwpFaWdlbjo6TWF0cml4M2YgSDEybW47CnN0ZDo6dmVjdG9yPGludD4gbGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXhYWGk+IEhMZXZlbHM7CnN0ZDo6dmVjdG9yPE1hdHJpeDJmcm93PiBkeGxldmVsczsKTWF0cml4MmZyb3cgZHhNYXRjaDsKTWF0cml4MmZyb3cgZHhCYXNlOwpNYXRyaXgyZnJvdyBMbWF4OwpzdGQ6OnVub3JkZXJlZF9tYXA8ZmxvYXQsTWF0cml4WDJmPiBYdGg7CmZsb2F0IHRobWF4OwpmbG9hdCB0aGZpbmVyZXM7Cmpzb24gb3B0aW9uczsKTWF0cml4MmZyb3cgbW5fb3JpZzsKaW50IG14TFZMOwoKc3RkOjp2ZWN0b3I8U29sQm94PiBxdmluaXQ7Cgp9OwoAAAAAAAAAAIwHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAACMBwAAI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiYmFzZS5oIgoKdm9pZCB0YWtlanNvbihjb25zdCBubG9obWFubjo6anNvbiYganNvbik7CgoKTWF0cml4WFhpClVwc2FtcGxlTWF4KGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4WFhpPiYgSHVwLGludCBuKTsKCgpNYXRyaXhYWGkKY29tcHV0ZUhpdG9ncmFtMkQoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYMmY+JiBYLE1hdHJpeDJpcm93IG5fZWRnZXMsIE1hdHJpeDJmcm93IHhtaW4sIE1hdHJpeDJmcm93IHhtYXgpOwoKCmludApnZXRQb2ludENvc3QoY29uc3QgRWlnZW46OlJlZjxjb25zdCBNYXRyaXhYWGk+JiBILCBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeDJmcm93PiYgZHgsCiAgICAgICAgICAgICBjb25zdCBFaWdlbjo6UmVmPGNvbnN0IEVpZ2VuOjpNYXRyaXhYMmY+JiBYLGNvbnN0IEVpZ2VuOjpSZWY8Y29uc3QgTWF0cml4MmZyb3c+JiBPaik7CgpzdHJ1Y3QgU29sQm94IHsKICAgICAgICBNYXRyaXgyZnJvdyBsYjsgLy8gYm90dG9tIGxlZnQgY29ybmVyCiAgICAgICAgTWF0cml4MmZyb3cgZHg7IC8vIHNpZGUgbGVuZ3RoCiAgICAgICAgaW50IGNvc3Q9MDsKICAgICAgICBpbnQgbHZsPTA7CiAgICAgICAgZmxvYXQgdGg9MDsKICAgICAgICBib29sIGZsZz1mYWxzZTsgLy8gdHJ1ZSBvbmx5IGlmIGNvc3Qgd2FzIGNvbXB1dGVkCn07CnN0cnVjdCBCQm94IHsKICAgICAgICBmbG9hdCB4MSx5MTsKICAgICAgICBmbG9hdCB4Mix5MjsKfTsKCnN0cnVjdCBCaW5NYXRjaFNvbCB7CiAgICAgICAgRWlnZW46Ok1hdHJpeDNmIEg7CiAgICAgICAgaW50IGNvc3QwOwogICAgICAgIGludCBjb3N0OwogICAgICAgIGludCBsdmw7CiAgICAgICAgaW50IG14TFZMOwp9OwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IFNvbEJveCYgc2IpOwoKc3RkOjpvc3RyZWFtJiBvcGVyYXRvcjw8KHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IEJCb3gmIHNiKTsKCnN0ZDo6b3N0cmVhbSYgb3BlcmF0b3IgPDwgKHN0ZDo6b3N0cmVhbSYgb3MsIGNvbnN0IHN0ZDo6dmVjdG9yPFNvbEJveD4mIHYpOwoKQkJveCBTb2xCb3gyQkJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7CgpzdGQ6OnZlY3RvcjxTb2xCb3g+IHF1YWRTcGxpdFNvbEJveChjb25zdCBTb2xCb3gmIHNvbGJveCk7Cgpib29sIFNvbEJveGVzSW50ZXJzZWN0KGNvbnN0IFNvbEJveCYgc2IxLGNvbnN0IFNvbEJveCYgc2IyKTsKCmJvb2wgU29sQm94ZXNJbnRlcnNlY3QoY29uc3QgQkJveCYgYmIxLGNvbnN0IFNvbEJveCYgc2IyKTsKCgpjbGFzcyBCaW5NYXRjaCB7CnB1YmxpYzoKQmluTWF0Y2goc3RkOjpzdHJpbmcgb3B0aW9uc18pOwp2b2lkIHNldE9wdGlvbnMoY29uc3Qgc3RkOjpzdHJpbmcgJm9wdGlvbnNfKTsKdm9pZCBjb21wdXRlSGxldmVscyhjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFh0YXJnKTsKCnN0ZDo6dmVjdG9yPEJpbk1hdGNoU29sPgpnZXRtYXRjaChjb25zdCBFaWdlbjo6UmVmPGNvbnN0IE1hdHJpeFgyZj4mIFhzcmMsY29uc3QgRWlnZW46OlJlZjxjb25zdCBFaWdlbiA6OiBNYXRyaXgzZj4mIEgxMik7CgpNYXRyaXgyZnJvdyB0MDsKRWlnZW46Ok1hdHJpeDNmIEgxMm1uOwpzdGQ6OnZlY3RvcjxpbnQ+IGxldmVsczsKc3RkOjp2ZWN0b3I8TWF0cml4WFhpPiBITGV2ZWxzOwpzdGQ6OnZlY3RvcjxNYXRyaXgyZnJvdz4gZHhsZXZlbHM7Ck1hdHJpeDJmcm93IGR4TWF0Y2g7Ck1hdHJpeDJmcm93IGR4QmFzZTsKTWF0cml4MmZyb3cgTG1heDsKc3RkOjp1bm9yZGVyZWRfbWFwPGZsb2F0LE1hdHJpeFgyZj4gWHRoOwpmbG9hdCB0aG1heDsKZmxvYXQgdGhmaW5lcmVzOwpqc29uIG9wdGlvbnM7Ck1hdHJpeDJmcm93IG1uX29yaWc7CmludCBteExWTDsKCnN0ZDo6dmVjdG9yPFNvbEJveD4gcXZpbml0OwoKfTsKAAAAAAAAAACTBwAAAAAAAAAAAAAAAAAAAAAAAJMHAAAAAAAAAAAAAAAAAAAAAAAAkwcAAAAAAAAAAAAAAAAAAAAAAACTBwAAAAAAAAAAAAAAAAAAAAAAAJMHAAAAAAAAAAAAAAAAAAAAAAAAkwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAA5QUAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"INST",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/include",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/scripts",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/src"
	],
	"file_history":
	[
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/src/measmapmanagers.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/scripts/binmatchwrap.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/include/kittiLocalize.h",
		"/C/Users/Nagnanamus/Downloads/ResearchCodes-master/ResearchCodes-master/main_scan_matching_deutchesmeuseum.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pytorchutils/losses.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudmodels/voxelnet.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/train_helpers.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/train.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudcore/voxel_generator.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/similarity_calculator_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/configs/car.config",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/modelBuilders.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/target_assigner_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/train.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/lossBuilder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/builder/losses_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/builder/second_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/preprocess_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/voxel_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/configs/car.config",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/pipeline_pb2.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/pipeline.proto",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/activations.proto",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pytorchutils/datamanipulators.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/torchplus/train/common.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/torchplus/train/__init__.py",
		"/C/Users/Nagnanamus/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudmodels/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/reinforcement/invertedbar.py",
		"/C/Users/Nagnanamus/Downloads/lidarprocessing/point2Dprocessing.py",
		"/C/Users/Nagnanamus/Google Drive/teaching/gradingHelperMAE488.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/OnPi/adafruit_icm20x.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/OnPi/multipleImuTest.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/.gitignore",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/icm20948-python-master/icm20948-python-master/library/icm20948/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/icm20948.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/adafruit_icm20x.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bit.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bits.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_struct.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_device.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bcd_alarm.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_Register-master/Adafruit_CircuitPython_Register-master/adafruit_register/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/I2Cdev.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/I2Cdev.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/adafruit_icm20649_test.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_SPIDevice.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_I2CDevice.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20X.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_BusIO_Register.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20X.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20649.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20649.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_BusIO_Register.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_I2CDevice.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_SPIDevice.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_Sensor.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_ICM20X-master/Adafruit_ICM20X-master/Adafruit_ICM20X.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_Sensor.cpp",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/Review248909(Reviewer2)Of20-1009v2.txt",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/ReportOn20-1009v2.txt",
		"/C/Users/Nagnanamus/Documents/S0267726116303803.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/10.2307_2949518.txt",
		"/C/Users/Nagnanamus/anaconda3/Lib/site-packages/pyglet/sprite.py",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/Review248911(Reviewer3)Of20-1009v2.txt",
		"/C/Users/Nagnanamus/Documents/GitHub/SLAM/lidarprocessing/point2Dprocessing.py",
		"/C/Users/Nagnanamus/.ssh/id_rsa.pub",
		"/C/Users/Nagnanamus/Downloads/opencv/README.md.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing2/point2Dprocessing.py",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2020 papers/AIAA2020_JPDAIMM/sample.bib",
		"/C/Users/Nagnanamus/Google Drive/repos/Stocks/data/SecInd.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/initialize.sh",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/README.md",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/roverbot.service",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/roverstartup.sh",
		"/C/Users/Nagnanamus/Documents/GitHub/SLAM2/SLAM/lidarprocessing/main_scan_matching.py",
		"/P/SLAMData/Kitti/visualodo/dataset/sequences/04/calib.txt",
		"/C/Users/Nagnanamus/AppData/Local/Temp/Temp1_data_odometry_calib.zip/dataset/sequences/04/calib.txt",
		"/P/SLAMData/Kitti/visualodo/dataset/sequences/00/calib.txt",
		"/P/SLAMData/Kitti/visualodo/pykitti/README.md",
		"/D/wpa_supplicant.conf.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Tumbller.ino",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/BalanceCar.h",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/KalmanFilter.h",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/raspberryPi/teststream.py",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_hub_ws/README.md",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/KalmanFilter.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Rgb.h",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Command.h",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/main_kittitracking.py",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd42_2369.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/ACC21__home_paperplaza_css.paperplaza.net_www_conferences_conferences_ACC21_submissions_0155_MS.pdf.txt",
		"/C/Users/Nagnanamus/AppData/Local/Temp/pericles_1099151439.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd39_2163-1.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd39_2163.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd37_979.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd36_1324.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109812000908.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109897001271.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109800000893.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd26_536.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0025556413000783.bib",
		"/C/Users/Nagnanamus/Google Drive/repos/Stocks/TDAmeritrade/MyVolSpikelast10dSTUDY.ts",
		"/C/Users/Nagnanamus/AppData/Local/Temp/2dcollections3d_demo.py",
		"/C/Users/NAGNAN~1/AppData/Local/Temp/kite_tutorial.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/mot.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/targets.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/filters/kalmanfilter.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/jpda.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/uqutils/helper.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/SLAM/physmodels/motionmodels.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/main.cpp",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/stereoSolver.cpp",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/SLAM/pclwrapper/src/main.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_stl.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_class.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_class.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/ppTransCov.cpp"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_async",
			"computeSeqH",
			"i1Hi_seq",
			"setHlevels",
			"map2D",
			"getmaplocal",
			"min_pt",
			"CropBox",
			"box",
			"regis",
			"MapPcllimits",
			"KittiLocalizer",
			"model_cfg",
			"train_input_reader",
			"lint",
			"\n",
			"\\\\n",
			"\\n",
			"ICM20649",
			"i2c",
			"lint",
			"_cached_gyro_range",
			"ICM20X_B0_PWR_MGMT_1",
			"ADDRBIT8_HIGH_TOREAD",
			"icm20x_gyro_cutoff_t",
			"enableAccelDLPF",
			"Serial.print",
			"Serial.println"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MapLocalizer",
			"config['model']",
			",",
			"i2c_bus",
			"printf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pyslam/scripts/kittiLocalize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6571,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 288.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pyslam/include/measmapmanagers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5316,
						"regions":
						{
						},
						"selection":
						[
							[
								4643,
								4643
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2197.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pyslam/src/measmapmanagers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40799,
						"regions":
						{
						},
						"selection":
						[
							[
								13974,
								13980
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 458.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2022 paper/LidarLocalozation/figures/histplots.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3690,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pyslam/src/pcl_helpers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1144,
						"regions":
						{
						},
						"selection":
						[
							[
								407,
								479
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pyslam/src/donseg.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6418,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pyslam/include/pf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 311,
						"regions":
						{
						},
						"selection":
						[
							[
								62,
								62
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pyslam/include/localize.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pyslam/src/localize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9003,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3456.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "pyslam/include/pcl_helpers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 374,
						"regions":
						{
						},
						"selection":
						[
							[
								37,
								37
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "pyslam/src/binmatch.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14967,
						"regions":
						{
						},
						"selection":
						[
							[
								5171,
								5181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2592.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "pyslam/include/base.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5620,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "pyslam/include/binmatch.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1939,
						"regions":
						{
						},
						"selection":
						[
							[
								1453,
								1509
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 505.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SLAM.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 429.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
