{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"map",
				"mapptr"
			],
			[
				"data",
				"datamanipulators\tmodule"
			],
			[
				"sim",
				"simname"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pyslam/scripts/kittiLocalize.cpp",
			"settings":
			{
				"buffer_size": 2634,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/measmapmanagers.h",
			"settings":
			{
				"buffer_size": 2701,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"measmapmanagers.h\"\n\n\nMapLocalizer::MapLocalizer(std::string opt ):bm(opt), kdtree(false),octree(1.0f){\n        options=json::parse(opt);\n\n        Vel.row(0,0)=0;\n        Vel.row(0,1)=0;\n        Vel.row(0,1)=0;\n\n        AngVel.row(0,0)=0;\n        AngVel.row(0,1)=0;\n        AngVel.row(0,1)=0;\n\n        XseqPos.row(0,0)=0;\n        XseqPos.row(0,1)=0;\n        XseqPos.row(0,1)=0;\n\n        i1Hi_seq.clear();\n\n\n\n        octree=pcl::octree::OctreePointCloudSearch<pcl::PointXYZ>(options[\"Localize\"][\"octree\"][\"resolution\"]);\n\n}\nvoid MapLocalizer::setOptions(std::string opt){\n        options=json::parse(opt);\n        bm.setOptions(opt);\n}\n\nvoid MapLocalizer::resetH(){\n        Vel = MatrixX3f({{0,0,0}});\n        AngVel = MatrixX3f({{0,0,0}});\n        XseqPos= MatrixX3f({{0,0,0}});\n\n        i1Hi_seq.clear();\n        gHs.clear();\n        gHs.push_back(Eigen::Matrix4f::Zero());\n}\n\n//-----------------Setters------------------\nvoid MapLocalizer::addMeas(const Eigen::Ref<const Eigen::MatrixXf> &X,float t){\n        pcl::PointCloud<pcl::PointXYZ>::Ptr C1(new pcl::PointCloud<pcl::PointXYZ>(X.rows(),1));\n        eigen2pcl(X,C1,false);\n\n        pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered (new pcl::PointCloud<pcl::PointXYZ>());\n        pcl_filter_cloud(C1,cloud_filtered,options[\"meas\"]['resolution'])\n\n\n        meas.push_back(cloud_filtered);\n        T.push_back(t);\n        ++tk;\n}\nvoid MapLocalizer::addMap(const Eigen::Ref<const Eigen::MatrixXf> &X){\n        map.reset(new pcl::PointCloud<pcl::PointXYZ>(X.rows(),1));\n        eigen2pcl(X,map,false);\n\n        pcl::PointCloud<pcl::PointXYZ>::Ptr map_filtered (new pcl::PointCloud<pcl::PointXYZ>());\n        pcl_filter_cloud(map,map_filtered,options[\"map\"]['resolution'])\n\n\n        map= map_filtered;\n\n        kdtree.setInputCloud (map);\n        std::cout << \"Built KDtree \" << std::endl;\n\n\n        octree.setInputCloud (map);\n        octree.addPointsFromInputCloud ();\n        std::cout << \"Built Octtree \" << std::endl;\n\n\n\n}\nvoid MapLocalizer::addMap2D(const Eigen::Ref<const MatrixX2f> &X){\n        map2D.reset(new pcl::PointCloud<pcl::PointXYZ>(X.rows(),1));\n        int i=0;\n        for(auto& p: *map2D) {\n                p.x = X(i,0);\n                p.y = X(i,1);\n                p.z = 0;\n                ++i;\n        }\n\n        pcl::PointCloud<pcl::PointXYZ>::Ptr map2D_filtered (new pcl::PointCloud<pcl::PointXYZ>());\n        pcl_filter_cloud(map2D,map2D_filtered,options[\"map2D\"]['resolution'])\n\n        map2D=map2D_filtered;\n\n        bm.computeHlevels(X);\n}\n\nvoid MapLocalizer::setHlevels(){\n        bm.computeHlevels(X);\n}\n\nvoid MapLocalizer::setgHk(int tk, Eigen::Matrix3f gHk ){\n\n}\nvoid MapLocalizer::setLookUpDist(){\n        double min_x,min_y,min_z,max_x,max_y,max_z;\n        octree.getBoundingBox(min_x,min_y,min_z,max_x,max_y,max_z);\n        float x_res=options[\"Localize\"][\"x_res\"];\n        float y_res=options[\"Localize\"][\"y_res\"];\n        float z_res=options[\"Localize\"][\"z_res\"];\n\n        float dmax = static_cast<float>( options[\"dmax\"] );\n\n        int nx = (max_x-min_x)/x_res;\n        ArrayXf x_edges(nx),y_edges(ny),z_edges(nz);\n        for (int i=0; i<nx; ++i)\n                x_edges(i)=i*x_res;\n        for (int i=0; i<ny; ++i)\n                y_edges(i)=i*y_res;\n\n        for (int i=0; i<nz; ++i)\n                z_edges(i)=i*z_res;\n\n        for (int i=0; i<nx; ++i) {\n                for (int i=0; i<ny; ++i) {\n                        for (int i=0; i<nz; ++i) {\n                                float dsq = getNNsqrddist2Map(pcl::PointXYZ(x_edges(i),y_edges(j),z_edges(k)),dmax);\n                                float d=std::sqrt(dsq);\n                                Xdist(i,j,k) = static_cast<uint16_t>(1000.0*d);\n                        }\n                }\n        }\n\n\n}\nvoid MeasManager::setRegisteredSeqH(){\n\n        for(std::size_t i=0; i<meas.size()-1; ++i) {\n                auto kk=std::make_pair(i,i+1);\n                if(i1Hi_seq.find(kk)!=i1Hi_seq.end()) {\n                        gicp.setInputSource(meas[i]);\n                        gicp.setInputTarget(meas[i+1]);\n                        pcl::PointCloud<pcl::PointXYZ>::Ptr resultXgicp(new pcl::PointCloud<pcl::PointXYZ>);\n                        gicp.align(*resultXgicp);\n                        auto H_gicp = gicp.getFinalTransformation();\n                        i1Hi_seq[kk]=H_gicp;\n                }\n        }\n\n        computeSeqH();\n\n}\nstd::vector<Eigen::Matrix4f> MapLocalizer::setSeq_gHk(){\n        gHk.clear();\n        gHk.push_back(Eigen::Matrix4f::Zero());\n        for(std::size_t i=1; i<meas.size(); ++i) {\n                if(i<gHk.size())\n                        continue;\n                else\n                        gHk.push_back(i1Hi_seq[std::make_pair(i-1,i)]*gHk[i-1]);\n        }\n        return gHk;\n}\n\n//-------------------Getters------------\nvoid MapLocalizer::getmeas(int k,pcl::PointCloud<pcl::PointXYZ>& meas);\nvoid MapLocalizer::getmeas(int k,MatrixXf& meas);\nvoid MapLocalizer::get2dmeas(int k,pcl::PointCloud<pcl::PointXYZ>& meas2d);\nvoid MapLocalizer::get2dmeas(int k,MatrixX2f& meas2d);\nfloat MapLocalizer::getdt(){\n        int n = T.size();\n        if(n>=2)\n                return T[n-1]-T[n-2];\n        else\n                return 0;\n}\nVector6f MapLocalizer::MapPcllimits(){\n        pcl::PointXYZ min_pt,max_pt;\n        pcl::getMinMax3D (map, min_pt, max_pt);\n        Vector6f lms({min_pt.x,min_pt.y,min_pt.z,max_pt.x,max_pt.y,max_pt.z});\n        return lms;\n}\n\nEigen::MatrixXf MapLocalizer::getmaplocal_eigen(Eigen::Vector3f lb,Eigen::Vector3f ub){\n        pcl::CropBox<pcl::PointXYZ> boxFilter;\n        boxFilter.setMin(Eigen::Vector4f(lb(0), lb(1), lb(2), 1.0));\n        boxFilter.setMax(Eigen::Vector4f(ub(0), ub(1), ub(2), 1.0));\n        boxFilter.setInputCloud(map);\n        pcl::PointCloud<pcl::PointXYZ>::Ptr bodyFiltered;\n        boxFilter.filter(*bodyFiltered);\n\n        Eigen::MatrixXf X;\n        pcl2eigen(bodyFiltered,X);\n        return X;\n}\npcl::PointCloud<pcl::PointXYZ>::ConstPtr\nMapLocalizer::getmaplocal(Eigen::Vector3f lb,Eigen::Vector3f ub){\n        pcl::CropBox<pcl::PointXYZ> boxFilter;\n        boxFilter.setMin(Eigen::Vector4f(lb(0), lb(1), lb(2), 1.0));\n        boxFilter.setMax(Eigen::Vector4f(ub(0), ub(1), ub(2), 1.0));\n        boxFilter.setInputCloud(map);\n        pcl::PointCloud<pcl::PointXYZ>::Ptr bodyFiltered;\n        boxFilter.filter(*bodyFiltered);\n\n        return bodyFiltered;\n}\n\nEigen::MatrixXf MapLocalizer::getmap_eigen(){\n        Eigen::MatrixXf X;\n        pcl2eigen(map,X);\n        return X;\n}\npcl::PointCloud<pcl::PointXYZ>::ConstPtr MapLocalizer::getmap(){\n        return map;\n}\n\nEigen::MatrixXf MapLocalizer::getmap2D_eigen(){\n        Eigen::MatrixXf X;\n        pcl2eigen(map2D,X);\n        return X;\n}\npcl::PointCloud<pcl::PointXYZ>::ConstPtr MapLocalizer::getmap2D_eigen(){\n        return map2D;\n}\n\nvoid MapLocalizer::getvelocities(){\n\n        gHk = getSeq_gHk();\n        for(std::size_t i=0; i<meas.size()-1; ++i) {\n                if(i+1>=Vel.rows()) {\n                        auto kk=std::make_pair(i,i+1);\n                        H = i1Hi_seq[kk];\n                        dt = T[i+1]-T[i];\n                        Vel.row(i+1)=H.block(0,3,0,3)/dt;\n                        AngVel.row(i+1)=H.block(0,3,3,3).eulerAngles(2, 1, 0);\n                        XseqPos.row(i+1)=gHk[i+1];\n                }\n        }\n\n\n}\n\nVectorXf MapLocalizer::getLikelihoods(const Eigen::Ref<const Eigen::MatrixXf> &Xposes,int tk){\n        if(options[\"Likelihood\"][\"method\"]==std::string(\"octree\"))\n                return computeLikelihood(octree,Xposes,meas.at(tk));\n        else if(options[\"Likelihood\"][\"method\"]==std::string(\"lookup\"))\n                return computeLikelihood_lookup(Xdist,Xposes,meas.at(tk));\n\n}\n\n\nstd::vector<Eigen::Matrix4f> MapLocalizer::getSeq_gHk(){\n  return gHk;\n}\nstd::vector<Eigen::Matrix4f> MapLocalizer::getsetSeq_gHk(int tk, Eigen::Matrix4f gHk){\n  gHkset = getSeq_gHk();\n  gHkset.at(tk)=gHk;\n  for(std::size_t i=1; i<meas.size(); ++i) {\n        if(i<gHk.size())\n                continue;\n        else\n                gHk[i]=i1Hi_seq[std::make_pair(i-1,i)]*gHk[i-1];\n}\n\n\n  return gHk;\n}\n// first align all the measruements\n// then fix the frame at tk as gHk\n// then compute the rel-trans  of the frames to this fixed frmae\n// if just from time 0: tk=0,  gHk=Identity\n// then transform all the measurements with their global frames\nMatrixX3f MapLocalizer::getalignSeqMeas(int t0,int tf,int tk, Eigen::Matrix4f gHk){\n        std::vector<Eigen::Matrix4f> gHk\n        gHk.push_back(Eigen::Matrix4f::Zero());\n        for(std::size_t i=1; i<meas.size(); ++i) {\n                if(i<gHk.size())\n                        continue;\n                else\n                        gHk[i]=i1Hi_seq[std::make_pair(i-1,i)]*gHk[i-1];\n        }\n        return gHk;\n}\n\n\n//-----------------Aligners-------------------------\n\nstd::vector<BinMatchSol>\nMapLocalizer::BMatch(int k,const Eigen::Ref<const Eigen :: Matrix4f>&gHk,bool gicp=true);\n\nstd::vector<BinMatchSol>\nMapLocalizer::BMatchseq(int t0,int tf,int tk,const Eigen::Ref<const Eigen :: Matrix4f>&gHk,bool gicp=true);\n\n\n\n// gHk takes k-frame local to gloal inertial frame\nEigen::Matrix4f\nMapLocalizer::gicp_correction(int tk, const Eigen::Ref<const Eigen :: Matrix4f>&gHk_est);\n",
			"file": "pyslam/src/measmapmanagers.cpp",
			"file_size": 12424,
			"file_write_time": 132893374927310000,
			"settings":
			{
				"buffer_size": 9259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/pf.h",
			"settings":
			{
				"buffer_size": 310,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/localize.h",
			"settings":
			{
				"buffer_size": 965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/src/localize.cpp",
			"settings":
			{
				"buffer_size": 7185,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/pcl_helpers.h",
			"settings":
			{
				"buffer_size": 370,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pyslam/src/pcl_helpers.cpp",
			"settings":
			{
				"buffer_size": 915,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pyslam/src/binmatch.cpp",
			"settings":
			{
				"buffer_size": 14953,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/base.h",
			"settings":
			{
				"buffer_size": 3311,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyslam/include/binmatch.h",
			"settings":
			{
				"buffer_size": 1975,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"INST",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/include",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/scripts",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/src"
	],
	"file_history":
	[
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/scripts/binmatchwrap.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/pyslam/include/kittiLocalize.h",
		"/C/Users/Nagnanamus/Downloads/ResearchCodes-master/ResearchCodes-master/main_scan_matching_deutchesmeuseum.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pytorchutils/losses.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudmodels/voxelnet.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/train_helpers.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/train.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudcore/voxel_generator.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/similarity_calculator_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/configs/car.config",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/modelBuilders.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/target_assigner_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/train.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/mypointpillar/lossBuilder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/builder/losses_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/pytorch/builder/second_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/preprocess_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/builder/voxel_builder.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/configs/car.config",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/pipeline_pb2.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/pipeline.proto",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/second/protos/activations.proto",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pytorchutils/datamanipulators.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/torchplus/train/common.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointpillar-second-pytorch/torchplus/train/__init__.py",
		"/C/Users/Nagnanamus/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing/pointcloudmodels/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/reinforcement/invertedbar.py",
		"/C/Users/Nagnanamus/Downloads/lidarprocessing/point2Dprocessing.py",
		"/C/Users/Nagnanamus/Google Drive/teaching/gradingHelperMAE488.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/OnPi/adafruit_icm20x.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/OnPi/multipleImuTest.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/.gitignore",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/icm20948-python-master/icm20948-python-master/library/icm20948/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/icm20948.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/adafruit_icm20x.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bit.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bits.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_struct.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_device.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_ICM20X-master/Adafruit_CircuitPython_ICM20X-master/i2c_bcd_alarm.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_CircuitPython_Register-master/Adafruit_CircuitPython_Register-master/adafruit_register/__init__.py",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/I2Cdev.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/I2Cdev.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/adafruit_icm20649_test.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_SPIDevice.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_I2CDevice.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20X.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_BusIO_Register.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20X.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20649.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_ICM20649.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_BusIO_Register.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_I2CDevice.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_SPIDevice.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_Sensor.h",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/Adafruit_ICM20X-master/Adafruit_ICM20X-master/Adafruit_ICM20X.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/RaspPiSensor/imuReader/Adafruit_Sensor.cpp",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/Review248909(Reviewer2)Of20-1009v2.txt",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/ReportOn20-1009v2.txt",
		"/C/Users/Nagnanamus/Documents/S0267726116303803.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/10.2307_2949518.txt",
		"/C/Users/Nagnanamus/anaconda3/Lib/site-packages/pyglet/sprite.py",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2018 papers/MOC-Paper/REVIEWS-AUTO/Review248911(Reviewer3)Of20-1009v2.txt",
		"/C/Users/Nagnanamus/Documents/GitHub/SLAM/lidarprocessing/point2Dprocessing.py",
		"/C/Users/Nagnanamus/.ssh/id_rsa.pub",
		"/C/Users/Nagnanamus/Downloads/opencv/README.md.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/lidarprocessing2/point2Dprocessing.py",
		"/C/Users/Nagnanamus/Google Drive/Nagavenkat_Adurthi_DRIVE/Nagavenkat_GoolgeDrive_Folder/2020 papers/AIAA2020_JPDAIMM/sample.bib",
		"/C/Users/Nagnanamus/Google Drive/repos/Stocks/data/SecInd.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/initialize.sh",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/README.md",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/roverbot.service",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_roverbot_ws/roverstartup.sh",
		"/C/Users/Nagnanamus/Documents/GitHub/SLAM2/SLAM/lidarprocessing/main_scan_matching.py",
		"/P/SLAMData/Kitti/visualodo/dataset/sequences/04/calib.txt",
		"/C/Users/Nagnanamus/AppData/Local/Temp/Temp1_data_odometry_calib.zip/dataset/sequences/04/calib.txt",
		"/P/SLAMData/Kitti/visualodo/dataset/sequences/00/calib.txt",
		"/P/SLAMData/Kitti/visualodo/pykitti/README.md",
		"/D/wpa_supplicant.conf.txt",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Tumbller.ino",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/BalanceCar.h",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/KalmanFilter.h",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/raspberryPi/teststream.py",
		"/C/Users/Nagnanamus/Google Drive/repos/roscodes/ros_hub_ws/README.md",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/KalmanFilter.cpp",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Rgb.h",
		"/C/Users/Nagnanamus/Google Drive/repos/Tumbller/Command.h",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/main_kittitracking.py",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd42_2369.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/ACC21__home_paperplaza_css.paperplaza.net_www_conferences_conferences_ACC21_submissions_0155_MS.pdf.txt",
		"/C/Users/Nagnanamus/AppData/Local/Temp/pericles_1099151439.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd39_2163-1.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd39_2163.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd37_979.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd36_1324.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109812000908.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109897001271.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0005109800000893.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/aiaa_jgcd26_536.bib",
		"/C/Users/Nagnanamus/AppData/Local/Temp/S0025556413000783.bib",
		"/C/Users/Nagnanamus/Google Drive/repos/Stocks/TDAmeritrade/MyVolSpikelast10dSTUDY.ts",
		"/C/Users/Nagnanamus/AppData/Local/Temp/2dcollections3d_demo.py",
		"/C/Users/NAGNAN~1/AppData/Local/Temp/kite_tutorial.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/mot.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/targets.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/filters/kalmanfilter.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/motfilter/jpda.py",
		"/C/Users/Nagnanamus/Google Drive/repos/SLAM/uq/uqutils/helper.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/SLAM/physmodels/motionmodels.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/main.cpp",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/stereoSolver.cpp",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/SLAM/pclwrapper/src/main.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_stl.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_class.cpp",
		"/home/nagnanamus/Downloads/pybind11/tests/test_class.py",
		"/home/nagnanamus/Insync/n.adurthi@gmail.com/Google Drive/repos/stereoPoseEKF/src/ppTransCov.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"regis",
			"MapPcllimits",
			"KittiLocalizer",
			"model_cfg",
			"train_input_reader",
			"lint",
			"\n",
			"\\\\n",
			"\\n",
			"ICM20649",
			"i2c",
			"lint",
			"_cached_gyro_range",
			"ICM20X_B0_PWR_MGMT_1",
			"ADDRBIT8_HIGH_TOREAD",
			"icm20x_gyro_cutoff_t",
			"enableAccelDLPF",
			"Serial.print",
			"Serial.println"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MapLocalizer",
			"config['model']",
			",",
			"i2c_bus",
			"printf"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pyslam/scripts/kittiLocalize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2634,
						"regions":
						{
						},
						"selection":
						[
							[
								518,
								518
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pyslam/include/measmapmanagers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2701,
						"regions":
						{
						},
						"selection":
						[
							[
								1185,
								1185
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pyslam/src/measmapmanagers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9259,
						"regions":
						{
						},
						"selection":
						[
							[
								8667,
								8667
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4182.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pyslam/include/pf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 310,
						"regions":
						{
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pyslam/include/localize.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 965,
						"regions":
						{
						},
						"selection":
						[
							[
								543,
								543
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pyslam/src/localize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7185,
						"regions":
						{
						},
						"selection":
						[
							[
								7185,
								7185
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1872.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pyslam/include/pcl_helpers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 370,
						"regions":
						{
						},
						"selection":
						[
							[
								227,
								227
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pyslam/src/pcl_helpers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 915,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								144
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pyslam/src/binmatch.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14953,
						"regions":
						{
						},
						"selection":
						[
							[
								5171,
								5181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2592.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "pyslam/include/base.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3311,
						"regions":
						{
						},
						"selection":
						[
							[
								2428,
								2436
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1008.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "pyslam/include/binmatch.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1975,
						"regions":
						{
						},
						"selection":
						[
							[
								1453,
								1509
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 505.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SLAM.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 429.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
